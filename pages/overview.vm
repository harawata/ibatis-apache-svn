<html>
<head>    
    <title>iBATIS Overview</title>
</head>

<body>

<h2>Every iBATIS implementation includes these basic components...</h2>

<img src="sqlmaps.gif" align="left"/><h2>iBATIS Data Mapper</h2>

<p>The iBATIS Data Mapper provides a very simple and flexible means of moving data between your Java and .NET objects and a relational
database. Use the full power of real SQL without a single line of JDBC or ADO.NET code!</p>

<p>The Data Mapper framework (a.k.a. SQL Maps) will help to significantly reduce the amount of Java and .NET code that is normally needed
to access a relational database. This framework maps classes to SQL statements using a very simple XML descriptor. Simplicity 
is the biggest advantage of iBATIS over other frameworks and object relational mapping tools. To use iBATIS you need only be 
familiar with your own application domain objects (basic JavaBeans or .NET classes), XML, and SQL. There is very little else to learn. There is no complex scheme required to join tables or 
execute complex queries. Using iBATIS you have the full power of real SQL at your fingertips. The iBATIS Data Mapper framework can map 
nearly any database to any object model and is very tolerant of legacy designs, or even bad designs. This is all achieved 
without special database tables, peer objects or code generation.</p>

<img src="dao.gif" align="left"/><h2>iBATIS Data Access Objects</h2>

<p>iBATIS Data Access Objects is an abstraction layer that hides the details of your persistence solution and provides a common API to the
rest of your application.</p>

<p>When developing robust Java and .NET applications, it is often a good idea to isolate the specifics of your persistence implementation
behind a common API. Data Access Objects allow you to create simple components that provide access to your data without
revealing the specifics of the implementation to the rest of your application. Using DAOs you can allow your application to
be dynamically configured to use different persistence mechanisms. If you have a complex application with a number of different
databases and persistence approaches involved, DAOs can help you create a consistent API for the rest of your application.</p>

<p>For Java users, the Data Access Objects framework is bundled as part of the iBATIS Database Layer, which
 includes the SQL Maps Framework. Although packaged together, the DAO Framework is completely independent and can be
 used without SQL Maps. .NET users can download the DataAccess framework seperately from the DataMapper framework.</p>

<img src="jp4.gif" />

<h2>iBATIS PetStore</h2>

<p><b>The official example application for iBATIS Data Mapper and DAO frameworks</b></p>

<p>PetStore is a fully functional web application based on iBATIS open source persistence layer products, including the
SQL Maps and Data Access Objects frameworks. JPetStore is an excellent example of how the iBATIS frameworks can be
implemented in a typical J2EE and .NET web application.</p>

</body>

</html>
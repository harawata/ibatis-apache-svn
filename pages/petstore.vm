<html>
<head>    
    <title>iBATIS PetStore and NPetshop</title>
</head>

<body>

<img src="jp4.gif" align="left"/><h2>iBATIS PetStore</h2>

<p><b>The official example application for iBATIS SQL Maps 2.0 and DAO 2.0</b></p>

<p>JPetStore 4.0 is a fully functional web application based on iBATIS open source persistence layer products, including the 
SQL Maps 2.0 and Data Access Objects 2.0 frameworks. JPetStore is an excellent example of how these frameworks can be 
implemented in a typical J2EE web application.</p>

<p>Features</p>

  <ul>
    <li> SQL Maps 2.0
    <li> Data Access Objects 2.0
    <li> POJO Service Layer
    <li> POJO Domain Classes
    <li> Struts MVC (Experimental BeanAction approach)
    <li> JSP Presentation Layer
  </ul>
  
<p>Qualities</p>

  <ul>
    <li> 100% freeware and open source tools and frameworks
    <li> Uses well known patterns and best practices
    <li> Highly productive programming model
    <li> Minimal Dependencies
    <li> No stored procedures
    <li> No generated code
  </ul>
  
<p>A New Beginning (and a work in progress)</p>

<p>JPetStore 4.0 marks a new start for JPetStore. Now that all of the pet store comparisons and benchmarks are behind 
it (hopefully), the focus of JPetStore 4 will be realigned. JPetStore 4 will now exclusively be a good example of 
application best practices and good design principles. But it's not there yet. A lot of old scars remain from its 
past as a tool for comparison to other platforms. These scars will slowly be erased. Here's the plan:</p>

  <ul>
    <li> Reimplement the presentation layer to one of the following: Struts 1.1, JSF or possibly Tapestry</li>
    <ul>
          <li> Currently JP4 uses an experimental Struts implementation --see BeanAction Javadocs for more</li>
    </ul>
    <li> Replace the database schema with a better one. The current database is (and has always been) a nightmare of poor database design practices.</li>
    <li> Consider middle tier frameworks with AOP and/or IoC features. I'm totally behind the simplification of J2EE, and I think AOP and IoC are the paths that will lead us to achieving that goal.</li>
  </ul>
  
<h2>NPetShop</h2>
<p>The Pet Store application has also been written for .NET and shares much of the same qualities as its Java brother.  However,
because it was written entirely outside of the context of competition, it doesn't share as many of the battle scars!  :-)</p>

<p>Check out both implementations by downloading them from our <a href="downloads.html">download page</a>.</p>

</body>

</html>
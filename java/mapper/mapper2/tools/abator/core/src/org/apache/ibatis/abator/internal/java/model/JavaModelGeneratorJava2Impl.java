/*
 *  Copyright 2006 The Apache Software Foundation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.apache.ibatis.abator.internal.java.model;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.abator.api.GeneratedJavaFile;
import org.apache.ibatis.abator.api.JavaModelGenerator;
import org.apache.ibatis.abator.api.ProgressCallback;
import org.apache.ibatis.abator.api.dom.OutputUtilities;
import org.apache.ibatis.abator.api.dom.java.CompilationUnit;
import org.apache.ibatis.abator.api.dom.java.Field;
import org.apache.ibatis.abator.api.dom.java.FullyQualifiedJavaType;
import org.apache.ibatis.abator.api.dom.java.InnerClass;
import org.apache.ibatis.abator.api.dom.java.JavaVisibility;
import org.apache.ibatis.abator.api.dom.java.Method;
import org.apache.ibatis.abator.api.dom.java.Parameter;
import org.apache.ibatis.abator.api.dom.java.TopLevelClass;
import org.apache.ibatis.abator.config.FullyQualifiedTable;
import org.apache.ibatis.abator.internal.db.ColumnDefinition;
import org.apache.ibatis.abator.internal.db.IntrospectedTable;
import org.apache.ibatis.abator.internal.rules.AbatorRules;
import org.apache.ibatis.abator.internal.util.JavaBeansUtil;
import org.apache.ibatis.abator.internal.util.StringUtility;
import org.apache.ibatis.abator.internal.util.messages.Messages;

/**
 * This class supports the following properties:
 * 
 * <dl>
 * <dt>trimStrings
 * <dt>
 * <dd>If true, the setters will trim all Strings. Default is false.</dd>
 * 
 * <dt>enableSubPackages
 * <dt>
 * <dd>If true, the classes will be generated in sub-packaged based on the
 * database catalg and schema - else the will be generated in the specified
 * package (the targetPackage attribute). Default is false.</dd>
 * 
 * <dt>rootClass
 * <dt>
 * <dd>If specified, then the root class of all objects generated by the
 * generator will be used as specified. No checking is done to see if the
 * specified class exists, or if the generated classes hide any attributes or
 * methods in the specified class. Note that the root class is not the base
 * class of all objects - just the root class. For example, if there is a
 * primary key then the primary key will extend the root class and the record
 * class will still extend the primary key.</dd>
 * </dl>
 * 
 * @author Jeff Butler
 */
public class JavaModelGeneratorJava2Impl implements JavaModelGenerator {

    protected List warnings;

    /**
     * The properties from the JavaModelGenerator congiguration element
     */
    protected Map properties;

    /**
     * The target package from the JavaModelGenerator congiguration element
     */
    protected String targetPackage;

    /**
     * The target project from the JavaModelGenerator congiguration element
     */
    protected String targetProject;

    private Map tableValueMaps;

    public JavaModelGeneratorJava2Impl() {
        super();
        tableValueMaps = new HashMap();
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.apache.ibatis.abator.api.JavaModelGenerator#setProperties(java.util.Map)
     */
    public void setProperties(Map properties) {
        this.properties = properties;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.apache.ibatis.abator.api.JavaModelGenerator#setTargetPackage(java.lang.String)
     */
    public void setTargetPackage(String targetPackage) {
        this.targetPackage = targetPackage;
    }

    private Map getTableValueMap(FullyQualifiedTable table) {
        Map map = (Map) tableValueMaps.get(table);
        if (map == null) {
            map = new HashMap();
            tableValueMaps.put(table, map);
        }

        return map;
    }

    /**
     * Adds fields and getter/setter methods for each ColumnDefinition passed
     * into the method.
     * 
     * @param table
     *            the table from which the ColumnDefinitions are derived. This
     *            is used to generate appropriate JavaDoc comments for the
     *            generated fields and methods.
     * @param columnDefinitions
     *            the collection of ColumnDefinitions used to generate fields
     *            and getter/setter methods.
     * @param answer
     *            the generated fields and methods will be added to this object
     */
    protected void generateClassParts(FullyQualifiedTable table,
            Collection columnDefinitions, TopLevelClass topLevelClass) {

        boolean trimStrings = "true".equalsIgnoreCase((String) properties //$NON-NLS-1$
                .get("trimStrings")); //$NON-NLS-1$

        StringBuffer sb = new StringBuffer();
        Field field;
        Method method;

        Iterator iter = columnDefinitions.iterator();
        while (iter.hasNext()) {
            ColumnDefinition cd = (ColumnDefinition) iter.next();
            FullyQualifiedJavaType fqjt = cd.getResolvedJavaType()
                    .getFullyQualifiedJavaType();

            topLevelClass.addImportedType(fqjt);

            String property = cd.getJavaProperty();

            field = new Field();
            field.addComment(table, cd.getColumnName());
            field.setVisibility(JavaVisibility.PRIVATE);
            field.setType(fqjt);
            field.setName(property);
            topLevelClass.addField(field);

            method = new Method();
            method.addGetterComment(table, cd);
            method.setVisibility(JavaVisibility.PUBLIC);
            method.setReturnType(fqjt);
            method.setName(JavaBeansUtil.getGetterMethodName(property));
            sb.setLength(0);
            sb.append("return "); //$NON-NLS-1$
            sb.append(property);
            sb.append(';');
            method.addBodyLine(sb.toString());
            topLevelClass.addMethod(method);

            method = new Method();
            method.addSetterComment(table, cd);
            method.setVisibility(JavaVisibility.PUBLIC);
            method.setName(JavaBeansUtil.getSetterMethodName(property));
            method.addParameter(new Parameter(fqjt, property));

            if (trimStrings && cd.isCharacterColumn()) {
                sb.setLength(0);
                sb.append("if ("); //$NON-NLS-1$
                sb.append(property);
                sb.append(" != null) {"); //$NON-NLS-1$
                method.addBodyLine(sb.toString());
                sb.setLength(0);
                sb.append(property);
                sb.append(" = "); //$NON-NLS-1$
                sb.append(property);
                sb.append(".trim();"); //$NON-NLS-1$
                method.addBodyLine(sb.toString());
                method.addBodyLine("}"); //$NON-NLS-1$
            }

            sb.setLength(0);
            sb.append("this."); //$NON-NLS-1$
            sb.append(property);
            sb.append(" = "); //$NON-NLS-1$
            sb.append(property);
            sb.append(';');
            method.addBodyLine(sb.toString());
            topLevelClass.addMethod(method);
        }
    }

    /**
     * Calculates the package for generated domain objects.
     * 
     * @param table
     *            the current table
     * @return the calculated package
     */
    protected String getJavaModelPackage(FullyQualifiedTable table) {
        String key = "getJavaModelPackage"; //$NON-NLS-1$
        String s;

        Map map = getTableValueMap(table);
        s = (String) map.get(key);
        if (s == null) {
            if ("true".equals(properties.get("enableSubPackages"))) { //$NON-NLS-1$  //$NON-NLS-2$
                StringBuffer sb = new StringBuffer(targetPackage);

                if (StringUtility.stringHasValue(table.getCatalog())) {
                    sb.append('.');
                    sb.append(table.getCatalog().toLowerCase());
                }

                if (StringUtility.stringHasValue(table.getSchema())) {
                    sb.append('.');
                    sb.append(table.getSchema().toLowerCase());
                }

                s = sb.toString();
            } else {
                s = targetPackage;
            }

            map.put(key, s);
        }

        return s;
    }

    protected CompilationUnit getPrimaryKey(IntrospectedTable introspectedTable) {

        if (!AbatorRules.generatePrimaryKey(introspectedTable)) {
            return null;
        }

        FullyQualifiedTable table = introspectedTable.getTableConfiguration().getTable();
        FullyQualifiedJavaType type = getPrimaryKeyType(table);
        TopLevelClass answer = new TopLevelClass(type);
        answer.setVisibility(JavaVisibility.PUBLIC);

        if (properties.containsKey("rootClass")) { //$NON-NLS-1$
            FullyQualifiedJavaType fqjt = new FullyQualifiedJavaType(
                    (String) properties.get("rootClass")); //$NON-NLS-1$

            answer.setSuperClass(fqjt);
            answer.addImportedType(fqjt);
        }

        generateClassParts(table, introspectedTable.getColumnDefinitions()
                .getPrimaryKey(), answer);

        return answer;
    }

    protected CompilationUnit getRecord(IntrospectedTable introspectedTable) {

        if (!AbatorRules.generateBaseRecordWithNoSuperclass(introspectedTable)
                && !AbatorRules
                        .generateBaseRecordExtendingPrimaryKey(introspectedTable)) {
            return null;
        }

        FullyQualifiedTable table = introspectedTable.getTableConfiguration().getTable();
        FullyQualifiedJavaType type = getRecordType(table);
        TopLevelClass answer = new TopLevelClass(type);
        answer.setVisibility(JavaVisibility.PUBLIC);

        if (AbatorRules
                .generateBaseRecordExtendingPrimaryKey(introspectedTable)) {
            answer.setSuperClass(getPrimaryKeyType(table));
        } else {
            if (properties.containsKey("rootClass")) { //$NON-NLS-1$
                FullyQualifiedJavaType fqjt = new FullyQualifiedJavaType(
                        (String) properties.get("rootClass")); //$NON-NLS-1$
                answer.setSuperClass(fqjt);
                answer.addImportedType(fqjt);
            }
        }

        generateClassParts(table, introspectedTable.getColumnDefinitions()
                .getNonBLOBColumns(), answer);

        return answer;
    }

    protected CompilationUnit getRecordWithBLOBs(IntrospectedTable introspectedTable) {

        if (!AbatorRules
                .generateRecordWithBLOBsExtendingPrimaryKey(introspectedTable)
                && !AbatorRules
                        .generateRecordWithBLOBsExtendingBaseRecord(introspectedTable)) {
            return null;
        }

        FullyQualifiedTable table = introspectedTable.getTableConfiguration().getTable();
        FullyQualifiedJavaType type = getRecordWithBLOBsType(table);
        TopLevelClass answer = new TopLevelClass(type);
        answer.setVisibility(JavaVisibility.PUBLIC);

        if (AbatorRules
                .generateRecordWithBLOBsExtendingPrimaryKey(introspectedTable)) {
            answer.setSuperClass(getPrimaryKeyType(table));
        } else {
            answer.setSuperClass(getRecordType(table));
        }

        generateClassParts(table, introspectedTable.getColumnDefinitions()
                .getBLOBColumns(), answer);

        return answer;
    }

    public void setTargetProject(String targetProject) {
        this.targetProject = targetProject;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.apache.ibatis.abator.api.JavaModelGenerator#getExampleType(org.apache.ibatis.abator.config.FullyQualifiedTable)
     */
    public FullyQualifiedJavaType getExampleType(FullyQualifiedTable table) {
        String key = "getExampleType"; //$NON-NLS-1$

        Map map = getTableValueMap(table);
        FullyQualifiedJavaType fqjt = (FullyQualifiedJavaType) map.get(key);
        if (fqjt == null) {
            StringBuffer sb = new StringBuffer();
            sb.append(getJavaModelPackage(table));
            sb.append('.');
            sb.append(table.getDomainObjectName());
            sb.append("Example"); //$NON-NLS-1$

            fqjt = new FullyQualifiedJavaType(sb.toString());
            map.put(key, fqjt);
        }

        return fqjt;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.apache.ibatis.abator.api.JavaModelGenerator#getGeneratedJavaFiles(org.apache.ibatis.abator.internal.db.ColumnDefinitions,
     *      org.apache.ibatis.abator.config.TableConfiguration,
     *      org.apache.ibatis.abator.api.ProgressCallback)
     */
    public List getGeneratedJavaFiles(IntrospectedTable introspectedTable, ProgressCallback callback) {
        List list = new ArrayList();

        String tableName = introspectedTable.getTableConfiguration().getTable()
                .getFullyQualifiedTableName();

        callback.startSubTask(Messages.getString(
                "JavaModelGeneratorDefaultImpl.0", //$NON-NLS-1$
                tableName));
        CompilationUnit cu = getExample(introspectedTable);
        if (cu != null) {
            GeneratedJavaFile gjf = new GeneratedJavaFile(cu, targetProject);
            list.add(gjf);
        }

        callback.startSubTask(Messages.getString(
                "JavaModelGeneratorDefaultImpl.1", //$NON-NLS-1$
                tableName));
        cu = getPrimaryKey(introspectedTable);
        if (cu != null) {
            GeneratedJavaFile gjf = new GeneratedJavaFile(cu, targetProject);
            list.add(gjf);
        }

        callback.startSubTask(Messages.getString(
                "JavaModelGeneratorDefaultImpl.2", //$NON-NLS-1$
                tableName));
        cu = getRecord(introspectedTable);
        if (cu != null) {
            GeneratedJavaFile gjf = new GeneratedJavaFile(cu, targetProject);
            list.add(gjf);
        }

        callback.startSubTask(Messages.getString(
                "JavaModelGeneratorDefaultImpl.3", //$NON-NLS-1$
                tableName));
        cu = getRecordWithBLOBs(introspectedTable);
        if (cu != null) {
            GeneratedJavaFile gjf = new GeneratedJavaFile(cu, targetProject);
            list.add(gjf);
        }

        return list;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.apache.ibatis.abator.api.JavaModelGenerator#getPrimaryKeyType(org.apache.ibatis.abator.config.FullyQualifiedTable)
     */
    public FullyQualifiedJavaType getPrimaryKeyType(FullyQualifiedTable table) {
        String key = "getPrimaryKeyType"; //$NON-NLS-1$

        Map map = getTableValueMap(table);
        FullyQualifiedJavaType fqjt = (FullyQualifiedJavaType) map.get(key);
        if (fqjt == null) {
            StringBuffer sb = new StringBuffer();
            sb.append(getJavaModelPackage(table));
            sb.append('.');
            sb.append(table.getDomainObjectName());
            sb.append("Key"); //$NON-NLS-1$

            fqjt = new FullyQualifiedJavaType(sb.toString());
            map.put(key, fqjt);
        }

        return fqjt;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.apache.ibatis.abator.api.JavaModelGenerator#getRecordType(org.apache.ibatis.abator.config.FullyQualifiedTable)
     */
    public FullyQualifiedJavaType getRecordType(FullyQualifiedTable table) {
        String key = "getRecordType"; //$NON-NLS-1$

        Map map = getTableValueMap(table);
        FullyQualifiedJavaType fqjt = (FullyQualifiedJavaType) map.get(key);
        if (fqjt == null) {
            StringBuffer sb = new StringBuffer();
            sb.append(getJavaModelPackage(table));
            sb.append('.');
            sb.append(table.getDomainObjectName());

            fqjt = new FullyQualifiedJavaType(sb.toString());
            map.put(key, fqjt);
        }

        return fqjt;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.apache.ibatis.abator.api.JavaModelGenerator#getRecordWithBLOBsType(org.apache.ibatis.abator.config.FullyQualifiedTable)
     */
    public FullyQualifiedJavaType getRecordWithBLOBsType(
            FullyQualifiedTable table) {
        String key = "getRecordWithBLOBsType"; //$NON-NLS-1$

        Map map = getTableValueMap(table);
        FullyQualifiedJavaType fqjt = (FullyQualifiedJavaType) map.get(key);
        if (fqjt == null) {
            StringBuffer sb = new StringBuffer();
            sb.append(getJavaModelPackage(table));
            sb.append('.');
            sb.append(table.getDomainObjectName());
            sb.append("WithBLOBs"); //$NON-NLS-1$

            fqjt = new FullyQualifiedJavaType(sb.toString());
            map.put(key, fqjt);
        }

        return fqjt;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.apache.ibatis.abator.api.JavaModelGenerator#setWarnings(java.util.List)
     */
    public void setWarnings(List warnings) {
        this.warnings = warnings;
    }

    protected Method getSetNullMethod(ColumnDefinition cd) {
        return getNoValueMethod(cd, "Null", "is null"); //$NON-NLS-1$ //$NON-NLS-2$
    }

    protected Method getSetNotNullMethod(ColumnDefinition cd) {
        return getNoValueMethod(cd, "NotNull", "is not null"); //$NON-NLS-1$ //$NON-NLS-2$
    }

    protected Method getSetEqualMethod(ColumnDefinition cd) {
        return getSingleValueMethod(cd, "Equal", "="); //$NON-NLS-1$ //$NON-NLS-2$
    }

    protected Method getSetNotEqualMethod(ColumnDefinition cd) {
        return getSingleValueMethod(cd, "NotEqual", "<>"); //$NON-NLS-1$ //$NON-NLS-2$
    }

    protected Method getSetGreaterThanMethod(ColumnDefinition cd) {
        return getSingleValueMethod(cd, "GreaterThan", ">"); //$NON-NLS-1$ //$NON-NLS-2$
    }

    protected Method getSetGreaterThenOrEqualMethod(ColumnDefinition cd) {
        return getSingleValueMethod(cd, "GreaterThanOrEqual", ">="); //$NON-NLS-1$ //$NON-NLS-2$
    }

    protected Method getSetLessThanMethod(ColumnDefinition cd) {
        return getSingleValueMethod(cd, "LessThan", "<"); //$NON-NLS-1$ //$NON-NLS-2$
    }

    protected Method getSetLessThanOrEqualMethod(ColumnDefinition cd) {
        return getSingleValueMethod(cd, "LessThanOrEqual", "<="); //$NON-NLS-1$ //$NON-NLS-2$
    }

    protected Method getSetLikeMethod(ColumnDefinition cd) {
        return getSingleValueMethod(cd, "Like", "like"); //$NON-NLS-1$ //$NON-NLS-2$
    }

    protected Method getSetNotLikeMethod(ColumnDefinition cd) {
        return getSingleValueMethod(cd, "NotLike", "not like"); //$NON-NLS-1$ //$NON-NLS-2$
    }

    protected Method getSingleValueMethod(ColumnDefinition cd, String nameFragment, String operator) {
        Method method = new Method();
        method.setVisibility(JavaVisibility.PUBLIC);
        method.addParameter(new Parameter(cd.getResolvedJavaType()
                .getFullyQualifiedJavaType(), "value")); //$NON-NLS-1$
        StringBuffer sb = new StringBuffer();
        sb.append(cd.getJavaProperty());
        sb.setCharAt(0, Character.toUpperCase(sb.charAt(0)));
        sb.insert(0, "add"); //$NON-NLS-1$
        sb.append(nameFragment);
        sb.append("Condition"); //$NON-NLS-1$
        method.setName(sb.toString());
        sb.setLength(0);
    
        if (cd.isJDBCDateColumn()) {
            sb.append("addSingleDateValueCondition(\""); //$NON-NLS-1$
        } else if (cd.isJDBCTimeColumn()) {
            sb.append("addSingleTimeValueCondition(\""); //$NON-NLS-1$
        } else {
            sb.append("addSingleValueCondition(\""); //$NON-NLS-1$
        }
    
        sb.append(cd.getAliasedColumnName());
        sb.append(' ');
        sb.append(operator);
        sb.append("\", value, \""); //$NON-NLS-1$
        sb.append(cd.getJavaProperty());
        sb.append("\");"); //$NON-NLS-1$
        method.addBodyLine(sb.toString());
    
        return method;
    }

    protected Method getNoValueMethod(ColumnDefinition cd, String nameFragment, String operator) {
        Method method = new Method();
        method.setVisibility(JavaVisibility.PUBLIC);
        StringBuffer sb = new StringBuffer();
        sb.append(cd.getJavaProperty());
        sb.setCharAt(0, Character.toUpperCase(sb.charAt(0)));
        sb.insert(0, "add"); //$NON-NLS-1$
        sb.append(nameFragment);
        sb.append("Condition"); //$NON-NLS-1$
        method.setName(sb.toString());
        sb.setLength(0);
        sb.append("conditionsWithoutValue.add(\""); //$NON-NLS-1$
        sb.append(cd.getAliasedColumnName());
        sb.append(' ');
        sb.append(operator);
        sb.append("\");"); //$NON-NLS-1$
        method.addBodyLine(sb.toString());
    
        return method;
    }

    /**
     * Generates methods that set between and not between conditions
     * 
     * @param cd
     * @param betweenMethod
     * @return
     */
    protected Method getSetBetweenOrNotBetweenMethod(ColumnDefinition cd, boolean betweenMethod) {
        Method method = new Method();
        method.setVisibility(JavaVisibility.PUBLIC);
        FullyQualifiedJavaType type = cd.getResolvedJavaType().getFullyQualifiedJavaType();
        
        method.addParameter(new Parameter(type, "value1")); //$NON-NLS-1$
        method.addParameter(new Parameter(type, "value2")); //$NON-NLS-1$
        StringBuffer sb = new StringBuffer();
        sb.append(cd.getJavaProperty());
        sb.setCharAt(0, Character.toUpperCase(sb.charAt(0)));
        sb.insert(0, "add"); //$NON-NLS-1$
        if (betweenMethod) {
            sb.append("BetweenCondition"); //$NON-NLS-1$
        } else {
            sb.append("NotBetweenCondition"); //$NON-NLS-1$
        }
        method.setName(sb.toString());
        sb.setLength(0);
    
        if (cd.isJDBCDateColumn()) {
            sb.append("addDateBetweenCondition(\""); //$NON-NLS-1$
        } else if (cd.isJDBCTimeColumn()) {
            sb.append("addTimeBetweenCondition(\""); //$NON-NLS-1$
        } else {
            sb.append("addBetweenCondition(\""); //$NON-NLS-1$
        }
    
        sb.append(cd.getAliasedColumnName());
        if (betweenMethod) {
            sb.append(" between"); //$NON-NLS-1$
        } else {
            sb.append(" not between"); //$NON-NLS-1$
        }
        sb.append("\", value1, value2, \""); //$NON-NLS-1$
        sb.append(cd.getJavaProperty());
        sb.append("\");"); //$NON-NLS-1$
        method.addBodyLine(sb.toString());
    
        return method;
    }

    protected CompilationUnit getExample(IntrospectedTable introspectedTable) {
        if (!AbatorRules.generateExampleExtendingPrimaryKey(introspectedTable)
                && !AbatorRules.generateExampleExtendingBaseRecord(introspectedTable)) {
            return null;
        }

        FullyQualifiedTable table = introspectedTable.getTableConfiguration().getTable();
        FullyQualifiedJavaType type = getExampleType(table);
        TopLevelClass topLevelClass = new TopLevelClass(type);
        topLevelClass.setVisibility(JavaVisibility.PUBLIC);

        // add field, getter, setter for orderby clause
        Field field = new Field();
        field.addComment(table);
        field.setVisibility(JavaVisibility.PRIVATE);
        field.setType(FullyQualifiedJavaType.getStringInstance());
        field.setName("orderByClause"); //$NON-NLS-1$
        topLevelClass.addField(field);

        Method method = new Method();
        method.addComment(table);
        method.setVisibility(JavaVisibility.PUBLIC);
        method.setName("setOrderByClause"); //$NON-NLS-1$
        method.addParameter(new Parameter(FullyQualifiedJavaType
                .getStringInstance(), "orderByClause")); //$NON-NLS-1$
        method.addBodyLine("this.orderByClause = orderByClause;"); //$NON-NLS-1$
        topLevelClass.addMethod(method);

        method = new Method();
        method.addComment(table);
        method.setVisibility(JavaVisibility.PUBLIC);
        method.setReturnType(FullyQualifiedJavaType.getStringInstance());
        method.setName("getOrderByClause"); //$NON-NLS-1$
        method.addBodyLine("return orderByClause;"); //$NON-NLS-1$
        topLevelClass.addMethod(method);

        // add field and methods for the list of conditions
        field = new Field();
        field.addComment(table);
        field.setVisibility(JavaVisibility.PRIVATE);

        FullyQualifiedJavaType fqjt = FullyQualifiedJavaType
                .getNewListInstance();

        field.setType(fqjt);
        field.setName("oredConditions"); //$NON-NLS-1$
        field.setInitializationString("new ArrayList()"); //$NON-NLS-1$
        topLevelClass.addField(field);

        method = new Method();
        method.addComment(table);
        method.setVisibility(JavaVisibility.PUBLIC);
        method.setReturnType(fqjt);
        method.setName("getOredConditions"); //$NON-NLS-1$
        method.addBodyLine("return oredConditions;"); //$NON-NLS-1$
        topLevelClass.addMethod(method);

        method = new Method();
        method.addComment(table);
        method.setVisibility(JavaVisibility.PUBLIC);
        method.setName("addOredCondition"); //$NON-NLS-1$
        method.addParameter(new Parameter(new FullyQualifiedJavaType(
                "AndedCondition"), //$NON-NLS-1$
                "andedCondition")); //$NON-NLS-1$

        method.addBodyLine("if (andedCondition.isValid()) {"); //$NON-NLS-1$
        method.addBodyLine("oredConditions.add(andedCondition);"); //$NON-NLS-1$
        method.addBodyLine("} else {"); //$NON-NLS-1$
        method
                .addBodyLine("throw new RuntimeException(\"At least one condition must be specified\");"); //$NON-NLS-1$
        method.addBodyLine("}"); //$NON-NLS-1$

        topLevelClass.addMethod(method);

        // now generate the inner class that holds the AND conditions
        topLevelClass.addInnerClass(getAndedConditionInnerClass(topLevelClass,
                introspectedTable));

        return topLevelClass;
    }

    protected InnerClass getAndedConditionInnerClass(
            TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        Field field;
        Method method;
        StringBuffer sb = new StringBuffer();

        InnerClass answer = new InnerClass(new FullyQualifiedJavaType(
                "AndedCondition")); //$NON-NLS-1$

        answer.setVisibility(JavaVisibility.PUBLIC);
        answer.setModifierStatic(true);
        answer.addComment(introspectedTable.getTableConfiguration().getTable());

        method = new Method();
        method.setVisibility(JavaVisibility.PUBLIC);
        method.setName("AndedCondition"); //$NON-NLS-1$
        method.setConstructor(true);
        method.addBodyLine("super();"); //$NON-NLS-1$
        method.addBodyLine("conditionsWithoutValue = new ArrayList();"); //$NON-NLS-1$
        method
                .addBodyLine("conditionsWithSingleValue = new ArrayList();"); //$NON-NLS-1$
        method
                .addBodyLine("conditionsWithListValue = new ArrayList();"); //$NON-NLS-1$
        method
                .addBodyLine("conditionsWithBetweenValue = new ArrayList();"); //$NON-NLS-1$
        answer.addMethod(method);

        // now we need to generate the methods that will be used in the SqlMap
        // to generate the dynamic where clause
        topLevelClass.addImportedType(FullyQualifiedJavaType
                .getNewMapInstance());
        topLevelClass.addImportedType(FullyQualifiedJavaType
                .getNewListInstance());
        topLevelClass.addImportedType(FullyQualifiedJavaType
                .getNewHashMapInstance());
        topLevelClass.addImportedType(FullyQualifiedJavaType
                .getNewArrayListInstance());

        field = new Field();
        field.setVisibility(JavaVisibility.PRIVATE);
        FullyQualifiedJavaType listOfStrings = FullyQualifiedJavaType
                .getNewListInstance();
        field.setType(listOfStrings);
        field.setName("conditionsWithoutValue"); //$NON-NLS-1$
        answer.addField(field);

        method = new Method();
        method.setVisibility(JavaVisibility.PUBLIC);
        method.setReturnType(field.getType());
        method.setName(JavaBeansUtil.getGetterMethodName(field.getName()));
        method.addBodyLine("return conditionsWithoutValue;"); //$NON-NLS-1$
        answer.addMethod(method);

        FullyQualifiedJavaType listOfMaps = FullyQualifiedJavaType
                .getNewListInstance();

        field = new Field();
        field.setVisibility(JavaVisibility.PRIVATE);
        field.setType(listOfMaps);
        field.setName("conditionsWithSingleValue"); //$NON-NLS-1$
        answer.addField(field);

        method = new Method();
        method.setVisibility(JavaVisibility.PUBLIC);
        method.setReturnType(field.getType());
        method.setName(JavaBeansUtil.getGetterMethodName(field.getName()));
        method.addBodyLine("return conditionsWithSingleValue;"); //$NON-NLS-1$
        answer.addMethod(method);

        field = new Field();
        field.setVisibility(JavaVisibility.PRIVATE);
        field.setType(listOfMaps);
        field.setName("conditionsWithListValue"); //$NON-NLS-1$
        answer.addField(field);

        method = new Method();
        method.setVisibility(JavaVisibility.PUBLIC);
        method.setReturnType(field.getType());
        method.setName(JavaBeansUtil.getGetterMethodName(field.getName()));
        method.addBodyLine("return conditionsWithListValue;"); //$NON-NLS-1$
        answer.addMethod(method);

        field = new Field();
        field.setVisibility(JavaVisibility.PRIVATE);
        field.setType(listOfMaps);
        field.setName("conditionsWithBetweenValue"); //$NON-NLS-1$
        answer.addField(field);

        method = new Method();
        method.setVisibility(JavaVisibility.PUBLIC);
        method.setReturnType(field.getType());
        method.setName(JavaBeansUtil.getGetterMethodName(field.getName()));
        method.addBodyLine("return conditionsWithBetweenValue;"); //$NON-NLS-1$
        answer.addMethod(method);

        method = new Method();
        method.setVisibility(JavaVisibility.PUBLIC);
        method.setReturnType(FullyQualifiedJavaType
                .getBooleanPrimitiveInstance());
        method.setName("isValid"); //$NON-NLS-1$
        method.addBodyLine("return conditionsWithoutValue.size() > 0"); //$NON-NLS-1$
        sb.setLength(0);
        OutputUtilities.javaIndent(sb, 2);
        sb.append("|| conditionsWithSingleValue.size() > 0"); //$NON-NLS-1$
        method.addBodyLine(sb.toString());
        sb.setLength(0);
        OutputUtilities.javaIndent(sb, 2);
        sb.append("|| conditionsWithListValue.size() > 0"); //$NON-NLS-1$
        method.addBodyLine(sb.toString());
        sb.setLength(0);
        OutputUtilities.javaIndent(sb, 2);
        sb.append("|| conditionsWithBetweenValue.size() > 0;"); //$NON-NLS-1$
        method.addBodyLine(sb.toString());
        answer.addMethod(method);

        // now add the methods for simplifying the individual field set methods
        method = new Method();
        method.setVisibility(JavaVisibility.PRIVATE);
        method.setName("addSingleValueCondition"); //$NON-NLS-1$
        method.addParameter(new Parameter(FullyQualifiedJavaType
                .getStringInstance(), "condition")); //$NON-NLS-1$
        method.addParameter(new Parameter(FullyQualifiedJavaType
                .getObjectInstance(), "value")); //$NON-NLS-1$
        method.addParameter(new Parameter(FullyQualifiedJavaType
                .getStringInstance(), "property")); //$NON-NLS-1$
        method.addBodyLine("if (value == null) {"); //$NON-NLS-1$
        method
                .addBodyLine("throw new RuntimeException(\"Value for \" + property + \" cannot be null\");"); //$NON-NLS-1$
        method.addBodyLine("}"); //$NON-NLS-1$
        method
                .addBodyLine("Map map = new HashMap();"); //$NON-NLS-1$
        method.addBodyLine("map.put(\"condition\", condition);"); //$NON-NLS-1$
        method.addBodyLine("map.put(\"value\", value);"); //$NON-NLS-1$
        method.addBodyLine("conditionsWithSingleValue.add(map);"); //$NON-NLS-1$
        answer.addMethod(method);

        FullyQualifiedJavaType listOfObjects = FullyQualifiedJavaType
                .getNewListInstance();

        method = new Method();
        method.setVisibility(JavaVisibility.PRIVATE);
        method.setName("addListValueCondition"); //$NON-NLS-1$
        method.addParameter(new Parameter(FullyQualifiedJavaType
                .getStringInstance(), "condition")); //$NON-NLS-1$
        method.addParameter(new Parameter(listOfObjects, "values")); //$NON-NLS-1$
        method.addParameter(new Parameter(FullyQualifiedJavaType
                .getStringInstance(), "property")); //$NON-NLS-1$
        method.addBodyLine("if (values == null || values.size() == 0) {"); //$NON-NLS-1$
        method
                .addBodyLine("throw new RuntimeException(\"Value list for \" + property + \" cannot be null or empty\");"); //$NON-NLS-1$
        method.addBodyLine("}"); //$NON-NLS-1$
        method
                .addBodyLine("Map map = new HashMap();"); //$NON-NLS-1$
        method.addBodyLine("map.put(\"condition\", condition);"); //$NON-NLS-1$
        method.addBodyLine("map.put(\"values\", values);"); //$NON-NLS-1$
        method.addBodyLine("conditionsWithListValue.add(map);"); //$NON-NLS-1$
        answer.addMethod(method);

        method = new Method();
        method.setVisibility(JavaVisibility.PRIVATE);
        method.setName("addBetweenCondition"); //$NON-NLS-1$
        method.addParameter(new Parameter(FullyQualifiedJavaType
                .getStringInstance(), "condition")); //$NON-NLS-1$
        method.addParameter(new Parameter(FullyQualifiedJavaType
                .getObjectInstance(), "value1")); //$NON-NLS-1$
        method.addParameter(new Parameter(FullyQualifiedJavaType
                .getObjectInstance(), "value2")); //$NON-NLS-1$
        method.addParameter(new Parameter(FullyQualifiedJavaType
                .getStringInstance(), "property")); //$NON-NLS-1$
        method.addBodyLine("if (value1 == null || value2 == null) {"); //$NON-NLS-1$
        method
                .addBodyLine("throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");"); //$NON-NLS-1$
        method.addBodyLine("}"); //$NON-NLS-1$
        method.addBodyLine("List list = new ArrayList();"); //$NON-NLS-1$
        method.addBodyLine("list.add(value1);"); //$NON-NLS-1$
        method.addBodyLine("list.add(value2);"); //$NON-NLS-1$
        method
                .addBodyLine("Map map = new HashMap();"); //$NON-NLS-1$
        method.addBodyLine("map.put(\"condition\", condition);"); //$NON-NLS-1$
        method.addBodyLine("map.put(\"values\", list);"); //$NON-NLS-1$
        method.addBodyLine("conditionsWithBetweenValue.add(map);"); //$NON-NLS-1$
        answer.addMethod(method);

        FullyQualifiedJavaType listOfDates = FullyQualifiedJavaType
                .getNewListInstance();

        if (introspectedTable.getColumnDefinitions().hasJDBCDateColumns()) {
            topLevelClass.addImportedType(FullyQualifiedJavaType
                    .getDateInstance());
            topLevelClass.addImportedType(FullyQualifiedJavaType
                    .getNewIteratorInstance());
            method = new Method();
            method.setVisibility(JavaVisibility.PRIVATE);
            method.setName("addSingleDateValueCondition"); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getStringInstance(), "condition")); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getDateInstance(), "value")); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getStringInstance(), "property")); //$NON-NLS-1$
            method
                    .addBodyLine("addSingleValueCondition(condition, new java.sql.Date(value.getTime()), property);"); //$NON-NLS-1$
            answer.addMethod(method);

            method = new Method();
            method.setVisibility(JavaVisibility.PRIVATE);
            method.setName("addDateListValueCondition"); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getStringInstance(), "condition")); //$NON-NLS-1$
            method.addParameter(new Parameter(listOfDates, "values")); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getStringInstance(), "property")); //$NON-NLS-1$
            method.addBodyLine("if (values == null || values.size() == 0) {"); //$NON-NLS-1$
            method
                    .addBodyLine("throw new RuntimeException(\"Value list for \" + property + \" cannot be null or empty\");"); //$NON-NLS-1$
            method.addBodyLine("}"); //$NON-NLS-1$
            method
                    .addBodyLine("List dateList = new ArrayList();"); //$NON-NLS-1$
            method.addBodyLine("Iterator iter = values.iterator();"); //$NON-NLS-1$
            method.addBodyLine("while (iter.hasNext()) {"); //$NON-NLS-1$
            method
                    .addBodyLine("dateList.add(new java.sql.Date(((Date)iter.next()).getTime()));"); //$NON-NLS-1$
            method.addBodyLine("}"); //$NON-NLS-1$
            method
                    .addBodyLine("addListValueCondition(condition, dateList, property);"); //$NON-NLS-1$
            answer.addMethod(method);

            method = new Method();
            method.setVisibility(JavaVisibility.PRIVATE);
            method.setName("addDateBetweenCondition"); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getStringInstance(), "condition")); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getDateInstance(), "value1")); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getDateInstance(), "value2")); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getStringInstance(), "property")); //$NON-NLS-1$
            method.addBodyLine("if (value1 == null || value2 == null) {"); //$NON-NLS-1$
            method
                    .addBodyLine("throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");"); //$NON-NLS-1$
            method.addBodyLine("}"); //$NON-NLS-1$
            method
                    .addBodyLine("addBetweenCondition(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);"); //$NON-NLS-1$
            answer.addMethod(method);
        }

        if (introspectedTable.getColumnDefinitions().hasJDBCTimeColumns()) {
            topLevelClass.addImportedType(FullyQualifiedJavaType
                    .getDateInstance());
            topLevelClass.addImportedType(FullyQualifiedJavaType
                    .getNewIteratorInstance());
            method = new Method();
            method.setVisibility(JavaVisibility.PRIVATE);
            method.setName("addSingleTimeValueCondition"); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getStringInstance(), "condition")); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getDateInstance(), "value")); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getStringInstance(), "property")); //$NON-NLS-1$
            method
                    .addBodyLine("addSingleValueCondition(condition, new java.sql.Time(value.getTime()), property);"); //$NON-NLS-1$
            answer.addMethod(method);

            method = new Method();
            method.setVisibility(JavaVisibility.PRIVATE);
            method.setName("addTimeListValueCondition"); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getStringInstance(), "condition")); //$NON-NLS-1$
            method.addParameter(new Parameter(listOfDates, "values")); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getStringInstance(), "property")); //$NON-NLS-1$
            method.addBodyLine("if (values == null || values.size() == 0) {"); //$NON-NLS-1$
            method
                    .addBodyLine("throw new RuntimeException(\"Value list for \" + property + \" cannot be null or empty\");"); //$NON-NLS-1$
            method.addBodyLine("}"); //$NON-NLS-1$
            method
                    .addBodyLine("List dateList = new ArrayList();"); //$NON-NLS-1$
            method.addBodyLine("Iterator iter = values.iterator();"); //$NON-NLS-1$
            method.addBodyLine("while (iter.hasNext()) {"); //$NON-NLS-1$
            method
                    .addBodyLine("dateList.add(new java.sql.Time(((Date)iter.next()).getTime()));"); //$NON-NLS-1$
            method.addBodyLine("}"); //$NON-NLS-1$
            method
                    .addBodyLine("addListValueCondition(condition, dateList, property);"); //$NON-NLS-1$
            answer.addMethod(method);

            method = new Method();
            method.setVisibility(JavaVisibility.PRIVATE);
            method.setName("addTimeBetweenCondition"); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getStringInstance(), "condition")); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getDateInstance(), "value1")); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getDateInstance(), "value2")); //$NON-NLS-1$
            method.addParameter(new Parameter(FullyQualifiedJavaType
                    .getStringInstance(), "property")); //$NON-NLS-1$
            method.addBodyLine("if (value1 == null || value2 == null) {"); //$NON-NLS-1$
            method
                    .addBodyLine("throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");"); //$NON-NLS-1$
            method.addBodyLine("}"); //$NON-NLS-1$
            method
                    .addBodyLine("addBetweenCondition(condition, new java.sql.Time(value1.getTime()), new java.sql.Time(value2.getTime()), property);"); //$NON-NLS-1$
            answer.addMethod(method);
        }

        Iterator iter = introspectedTable.getColumnDefinitions().getAllColumns().iterator();
        while (iter.hasNext()) {
            ColumnDefinition cd = (ColumnDefinition) iter.next();

            if (cd.isBLOBColumn()) {
                continue;
            }

            topLevelClass.addImportedType(cd.getResolvedJavaType()
                    .getFullyQualifiedJavaType());

            // here we need to add the individual methods for setting the
            // conditions for a field
            answer.addMethod(getSetNullMethod(cd));
            answer.addMethod(getSetNotNullMethod(cd));
            answer.addMethod(getSetEqualMethod(cd));
            answer.addMethod(getSetNotEqualMethod(cd));
            answer.addMethod(getSetGreaterThanMethod(cd));
            answer.addMethod(getSetGreaterThenOrEqualMethod(cd));
            answer.addMethod(getSetLessThanMethod(cd));
            answer.addMethod(getSetLessThanOrEqualMethod(cd));

            if (cd.isCharacterColumn()) {
                answer.addMethod(getSetLikeMethod(cd));
                answer.addMethod(getSetNotLikeMethod(cd));
            }

            answer.addMethod(getSetInOrNotInMethod(cd, true));
            answer.addMethod(getSetInOrNotInMethod(cd, false));
            answer.addMethod(getSetBetweenOrNotBetweenMethod(cd, true));
            answer.addMethod(getSetBetweenOrNotBetweenMethod(cd, false));
        }

        return answer;
    }

    /**
     * 
     * @param cd
     * @param inMethod
     *            if true generates an "in" method, else generates a "not in"
     *            method
     * @return
     */
    protected Method getSetInOrNotInMethod(ColumnDefinition cd, boolean inMethod) {
        Method method = new Method();
        method.setVisibility(JavaVisibility.PUBLIC);
        FullyQualifiedJavaType type = FullyQualifiedJavaType
                .getNewListInstance();
        method.addParameter(new Parameter(type, "values")); //$NON-NLS-1$
        StringBuffer sb = new StringBuffer();
        sb.append(cd.getJavaProperty());
        sb.setCharAt(0, Character.toUpperCase(sb.charAt(0)));
        sb.insert(0, "add"); //$NON-NLS-1$
        if (inMethod) {
            sb.append("InCondition"); //$NON-NLS-1$
        } else {
            sb.append("NotInCondition"); //$NON-NLS-1$
        }
        method.setName(sb.toString());
        sb.setLength(0);

        if (cd.isJDBCDateColumn()) {
            sb.append("addDateListValueCondition(\""); //$NON-NLS-1$
        } else if (cd.isJDBCTimeColumn()) {
            sb.append("addTimeListValueCondition(\""); //$NON-NLS-1$
        } else {
            sb.append("addListValueCondition(\""); //$NON-NLS-1$
        }

        sb.append(cd.getAliasedColumnName());
        if (inMethod) {
            sb.append(" in"); //$NON-NLS-1$
        } else {
            sb.append(" not in"); //$NON-NLS-1$
        }
        sb.append("\", values, \""); //$NON-NLS-1$
        sb.append(cd.getJavaProperty());
        sb.append("\");"); //$NON-NLS-1$
        method.addBodyLine(sb.toString());

        return method;
    }
}

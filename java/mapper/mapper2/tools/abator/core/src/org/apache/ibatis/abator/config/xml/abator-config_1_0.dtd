<?xml version="1.0" encoding="UTF-8"?>

<!--
   Copyright 2005 The Apache Software Foundation
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!--
  This DTD defines the structure of the Abator for iBATIS configuration file
-->

<!ENTITY % Boolean "(true|false)">

<!--
  The abatorConfiguration element is the root element for Abator configurations.
-->
<!ELEMENT abatorConfiguration (abatorContext+)>
                        
<!--
  The abatorContext element is used to describe a context for generating files, and the source
  tables.

  <p>Optional Attributes:</p>
  <dl>
    <dt>id</dt> <dd>This optional element will be used in some information messages
                    generated by the tool</dd>
  </dl>
-->
<!ELEMENT abatorContext (jdbcConnection, javaTypeResolver?, javaModelGenerator,
                        sqlMapGenerator, daoGenerator?, table+)>
<!ATTLIST abatorContext id CDATA #IMPLIED>

<!--
  <p>The jdbcConnection element is used to describe the JDBC connection that Abator
  will use to introspect the database.</p>
  
  <p>Required Attributes:</p>
  <dl>
    <dt>driverClass</dt> <dd>The fully qualified java class for the JDBC driver</dd>
    <dt>connectionURL</dt> <dd>The JDBC URL</dd>
  </dl>
  
  <p>Optional Attributes:</p>
  <dl>
    <dt>userId</dt> <dd>The user id for the database connection (default is no user id)</dd>
    <dt>password</dt> <dd>The password for the database connection (default is no password)</dd>
  </dl>
-->
<!ELEMENT jdbcConnection (classPathEntry*, property*)>
<!ATTLIST jdbcConnection 
  driverClass CDATA #REQUIRED
  connectionURL CDATA #REQUIRED
  userId CDATA #IMPLIED
  password CDATA #IMPLIED>

<!--
  <p>The classPathEntry element is used to add the JDBC driver to the run-time classpath.
     Repeat this element as often as needed to add elements to the classpath.</p>

  <p>Required Attributes:</p>
  <dl>
    <dt>location</dt> <dd>The full path name of a JAR/ZIP file to add to the classpath, or
                          a directory to add to the classpath</dd>
  </dl>
-->
<!ELEMENT classPathEntry EMPTY>
<!ATTLIST classPathEntry
  location CDATA #REQUIRED>

<!--
  <p>The property element is used to add custom properties to many of Abator's
     configuration elements.  See each element for example properties.
     Repeat this element as often as needed to add as many properties as necessary
     to the configuration element.</p>

  <p>Required Attributes:</p>
  <dl>
    <dt>name</dt> <dd>The name of the property (used as the key in a map)</dd>
    <dt>value</dt> <dd>The value of the property</dd>
  </dl>
-->
<!ELEMENT property EMPTY>
<!ATTLIST property
  name CDATA #REQUIRED
  value CDATA #REQUIRED>

<!--
  <p>The javaModelGenerator element is used to define properties of the Java Model Generator.
     The Java Model Generator builds primary key classes, record classes, and Query by Example 
     indicator classes.</p>
  <p>The default Java Model Generator supports a property "trimStrings".  If true, then
     the setters for any String property will trim the String.  If false (default)
     the Strings will not be trimmed and may contain trailing blanks if the database
     returns trailing blanks.</p>

  <p>Required Attributes:</p>
  <dl>
    <dt>targetPackage</dt> <dd>This is the package where the classes will be placed.  In
                             the default generator, the property "enableSubPackages"
                             controls how the actual package is calculated.  If true,
                             then the calculated package will be the targetPackage plus
                             sub packages for the table's catalog and schema if they exist.
                             If false (the default) then the calculated package will be
                             exactly what is specified in the targetPackage attribute.</dd>
    <dt>targetProject</dt> <dd>This can be used to specify a target project for the
                               generated objects.  When running in the Eclipse
                               environment, this specifies where the objects will be saved.
                               In other environments, this value is ignored by Abator.</dd>
  </dl>

  <p>Optional Attributes:</p>
  <dl>
    <dt>type</dt> <dd>This can be used to specify a user provided Java Model Generator.
                      The class must implement the interface org.apache.ibatis.abator.api.JavaModelGenerator,
                      and must have a public default constructor.  This functionality
                      does not function correctly in the Eclipse environment.  That will be
                      corrected when the plugin is upgraded to Eclipse version 3.1.</dd>
  </dl>
-->
<!ELEMENT javaModelGenerator (property*)>
<!ATTLIST javaModelGenerator
  type CDATA #IMPLIED
  targetPackage CDATA #REQUIRED
  targetProject CDATA #REQUIRED>

<!--
  <p>The javaTypeResolver element is used to define properties of the Java Type Resolver.
     The Java Type Resolver is used to calculate Java types from database column information.
     The default Java Type Resolver attempts to make JDBC DECIMAL and NUMERIC types easier
     to use by substituting Integral types if possible (Long, Integer, Short, etc.)
     If this behavior is undesirable, set the property "forceBigDecimals" to "true".</p>

  <p>Optional Attributes:</p>
  <dl>
    <dt>type</dt> <dd>This can be used to specify a user provided Java Type Resolver.
                      The class must implement the interface org.apache.ibatis.abator.api.JavaTypeResolver,
                      and must have a public default constructor.  This functionality
                      does not function correctly in the Eclipse environment.  That will be
                      corrected when the plugin is upgraded to Eclipse version 3.1.</dd>
  </dl>
-->
<!ELEMENT javaTypeResolver (property*)>
<!ATTLIST javaTypeResolver
  type CDATA #IMPLIED>

<!--
  <p>The sqlMapGenerator element is used to define properties of the SQL Map Generator.
     The SQL Map Generator builds an XML file for each table that conforms to iBATIS'
     SqlMap DTD.</p>

  <p>Required Attributes:</p>
  <dl>
    <dt>targetPackage</dt> <dd>This is the package where the XML files will be placed.  In
                             the default generator, the property "enableSubPackages"
                             controls how the actual package is calculated.  If true,
                             then the calculated package will be the targetPackage plus
                             sub packages for the table's catalog and schema if they exist.
                             If false (the default) then the calculated package will be
                             exactly what is specified in the targetPackage attribute.</dd>
    <dt>targetProject</dt> <dd>This can be used to specify a target project for the
                               generated objects.  When running in the Eclipse
                               environment, this specifies where the objects will be saved.
                               In other environments, this value is ignored by Abator.</dd>
  </dl>

  <p>Optional Attributes:</p>
  <dl>
    <dt>type</dt> <dd>This can be used to specify a user provided SQL Map Generator.
                      The class must implement the interface org.apache.ibatis.abator.api.SqlMapGenerator,
                      and must have a public default constructor.  This functionality
                      does not function correctly in the Eclipse environment.  That will be
                      corrected when the plugin is upgraded to Eclipse version 3.1.</dd>
  </dl>
-->
<!ELEMENT sqlMapGenerator (property*)>
<!ATTLIST sqlMapGenerator
  type CDATA #IMPLIED
  targetPackage CDATA #REQUIRED
  targetProject CDATA #REQUIRED>

<!--
  <p>The daoGenerator element is used to define properties of the DAO Generator.
     The DAO Generator builds DAO an interface and implementation class for each table.
     If this element is missing, then Abator will not build DAO classes.</p>
     
  <p>Abator will build DAOs of four types, depending on the value of the type
     attribute:</p>
  <dl>
    <dt>IBATIS</dt><dd>The generated DAO objects will conform to the iBATIS DAO framework.</dd>
    <dt>SPRING</dt><dd>The generated DAO objects will conform to the Spring DAO framework.</dd>
    <dt>GENERIC-CI</dt><dd>The generated DAO objects will rely only on the SqlMapClient.  The SqlMapClient
                           will be supplied by constructor dependency injection.</dd>
    <dt>GENERIC-SI</dt><dd>The generated DAO objects will rely only on the SqlMapClient.  The SqlMapClient
                           will be supplied by setter dependency injection.</dd>
  </dl>
    

  <p>Required Attributes:</p>
  <dl>
    <dt>type</dt> <dd>This is used to specify the type of DAO to be generated. 
                      This can also be used to specify a user provided DAO Generator.
                      The class must implement the interface org.apache.ibatis.abator.api.DAOGenerator,
                      and must have a public default constructor.  This functionality of providing a user class
                      does not function correctly in the Eclipse environment.  That will be
                      corrected when the plugin is upgraded to Eclipse version 3.1.</dd>
    <dt>targetPackage</dt> <dd>This is the package where the DAOs will be placed.  In
                             the default generator, the property "enableSubPackages"
                             controls how the actual package is calculated.  If true,
                             then the calculated package will be the targetPackage plus
                             sub packages for the table's catalog and schema if they exist.
                             If false (the default) then the calculated package will be
                             exactly what is specified in the targetPackage attribute.</dd>
    <dt>targetProject</dt> <dd>This can be used to specify a target project for the
                               generated objects.  When running in the Eclipse
                               environment, this specifies where the objects will be saved.
                               In other environments, this value is ignored by Abator.</dd>
  </dl>
-->
<!ELEMENT daoGenerator (property*)>
<!ATTLIST daoGenerator
  type CDATA #REQUIRED
  targetPackage CDATA #REQUIRED
  targetProject CDATA #REQUIRED>

<!--
  <p>The table element is used to specify a database table that will be the source information
     for a set of generated objects.</p>

  <p>The table element supports the property "useActualColumnNames".  If true, then
     Abator will use column names as returned from the database metadata as the properties
     of the generated domain objects.  If false (default), Abator will attempt to camel
     case the returned names.  In either event, the name can be specified explicitely by the
     &lt;columnOverride&gt; element.</p>

  <p>Required Attributes:</p>
  <dl>
    <dt>tableName</dt> <dd>The name of the database table (not including the schema or catalog).</dd>
  </dl>

  <p>Optional Attributes:</p>
  <dl>
    <dt>schema</dt> <dd>The database schema - not required if your database does not use schemas,
                        or if there is a default schema.</dd>
    <dt>catalog</dt> <dd>The database catalog - not required if your database does not use catalogs,
                         or if there is a default catalog.</dd>
    <dt>domainObjectName</dt> <dd>The base name from which generated object names will be generated.
                                  If not specified, Abator will generate a name automatically based on
                                  the tableName.  The name (either specified here, or generated
                                  automatically) will be used to compute generated domain class names
                                  and DAO class names.</dd>
    <dt>enableInsert</dt> <dd>Signifies whether an insert statement should be generated (the default is true).</dd>
    <dt>enableSelectByPrimaryKey</dt> <dd>Signifies whether a select by primary key statement should be generated (the default is true).
                                          Regardless of this setting, the statement will not be generated if the
                                          table does not have a primary key.</dd>
    <dt>enableSelectByExample</dt> <dd>Signifies whether a select by example statement should be generated (the default is true).
                                       This statement enables many different dynamic queries to be generated at run time.</dd>
    <dt>enableUpdateByPrimaryKey</dt> <dd>Signifies whether an update by primary key statement should be generated (the default is true).
                                          Regardless of this setting, the statement will not be generated if the
                                          table does not have a primary key.</dd>
    <dt>enableDeleteByPrimaryKey</dt> <dd>Signifies whether an delete by primary key statement should be generated (the default is true).
                                          Regardless of this setting, the statement will not be generated if the
                                          table does not have a primary key.</dd>
    <dt>enableDeleteByExample</dt> <dd>Signifies whether a delete by example statement should be generated (the default is true).
                                       This statement enables many different dynamic deletes to be generated at run time.</dd>
    <dt>selectByPrimaryKeyQueryId</dt> <dd>This value will be added to the select list of the select by primary key statement
                                           in this form: "'&lt;value&gt;' as QUERYID".
                                           This can be useful for identifying queries in DBA tracing tools at run time.
                                           If you use thus value, you should specify a unique id for every different query
                                           generated by Abator.</dd>
    <dt>selectByExampleQueryId</dt> <dd>This value will be added to the select list of the select by example statement
                                           in this form: "'&lt;value&gt;' as QUERYID".
                                           This can be useful for identifying queries in DBA tracing tools at run time.
                                           If you use thus value, you should specify a unique id for every different query
                                           generated by Abator.</dd>
  </dl>
-->
<!ELEMENT table (property*, generatedKey?, (columnOverride | ignoreColumn)*) >
<!ATTLIST table
  catalog CDATA #IMPLIED
  schema CDATA #IMPLIED
  tableName CDATA #REQUIRED
  domainObjectName CDATA #IMPLIED
  enableInsert %Boolean; #IMPLIED
  enableSelectByPrimaryKey %Boolean; #IMPLIED
  enableSelectByExample %Boolean; #IMPLIED
  enableUpdateByPrimaryKey %Boolean; #IMPLIED
  enableDeleteByPrimaryKey %Boolean; #IMPLIED
  enableDeleteByExample %Boolean; #IMPLIED
  selectByPrimaryKeyQueryId CDATA #IMPLIED
  selectByExampleQueryId CDATA #IMPLIED>

<!--
  <p>The columnOverride element is used to change certain attributes of the column
     from their default values.</p>
     
  <p>Required Attributes:</p>
  <dl>
    <dt>column</dt> <dd>The column name of the overridden column.</dd>
  </dl>

  <p>Optional Attributes:</p>
  <dl>
    <dt>property</dt> <dd>The name of a Java property to be used.  If not specified,
                          Abator will generate properties based on the column name.
                          For example, if a table has a column named STRT_DTE, Abator
                          will generate the property name as either STRT_DTE or strtDte
                          based on the value of the "useActualColumnNames" property (see the
                          description of the &lt;table&gt; element for more information).
                          This property could be used to rename the column "startDate"</dd>
    <dt>javaType</dt> <dd>The fully qualified Java Type of the property for this column.  This
                          can be used to override the type calculated by the JavaTypeResolver
                          if required.  For some databases, this is necessary to handle
                          "odd" database types (e.g. MySql's unsigned bigint type
                          should be mapped to java.lang.Object).</dd>
    <dt>jdbcType</dt> <dd>The JDBC Type (INTEGER, DECIMAL, NUMERIC, VARCHAR, etc.) for the column.
                          This
                          can be used to override the type calculated by the JavaTypeResolver
                          if required.  For some databases this is necessary to handle JDBC driver
                          quirks (e.g. DB2's LONGVARCHAR type should be mapped to VARCHAR for iBATIS).</dd>
  </dl>
-->
<!ELEMENT columnOverride EMPTY>
<!ATTLIST columnOverride
  column CDATA #REQUIRED
  property CDATA #IMPLIED
  javaType CDATA #IMPLIED
  jdbcType CDATA #IMPLIED>

<!--
  <p>The ignoreColumn element is used to identify a column that should be ignored.
     No generated SQL will refer to the column, and no property will be generated
     for the column in the model objects.</p>
     
  <p>Required Attributes:</p>
  <dl>
    <dt>column</dt> <dd>The column name of the ignored column.</dd>
  </dl>
-->
<!ELEMENT ignoreColumn EMPTY>
<!ATTLIST ignoreColumn
  column CDATA #REQUIRED>

<!--
  <p>The generatedKey element is used to identify a column in the table whose value
     is calculated - either from a sequence (or some other query), or as an identity column.</p>
     
  <p>Abator has predefined identity clauses for these databases:</p>
  <ul>
    <li>DB2</li>
    <li>MySql</li>
    <li>SqlServer</li>
  </ul>
  
  <p>You can use one of the predefined identity clauses if you specify the "identity" attribute
     as "true"</p>

  <p>Required Attributes:</p>
  <dl>
    <dt>column</dt> <dd>The column name of the generated column.</dd>
    <dt>sqlStatement</dt> <dd>The SQL statement that will return the new value.  If this is
                              an identity column, then you can use one of the predefined
                              clauses, or substitute the proper statement for your database.</dd>
    <dt>identity</dt> <dd>If true, then the generated &lt;selectKey&gt; element will be placed
                          after the insert (for an identity column).  If false, then 
                          the generated &lt;selectKey&gt; will be placed before the insert
                          (typically for a sequence).</dd>
  </dl>
-->
<!ELEMENT generatedKey EMPTY>
<!ATTLIST generatedKey
  column CDATA #REQUIRED
  sqlStatement CDATA #REQUIRED
  identity %Boolean; #REQUIRED>
  
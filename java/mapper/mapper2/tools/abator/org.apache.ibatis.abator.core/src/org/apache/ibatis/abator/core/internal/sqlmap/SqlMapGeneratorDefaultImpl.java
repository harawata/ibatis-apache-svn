/*
 *  Copyright 2005 The Apache Software Foundation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.apache.ibatis.abator.core.internal.sqlmap;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.StringTokenizer;

import org.apache.ibatis.abator.core.api.GeneratedXmlFile;
import org.apache.ibatis.abator.core.api.JavaModelGenerator;
import org.apache.ibatis.abator.core.api.SqlMapGenerator;
import org.apache.ibatis.abator.core.config.TableConfiguration;
import org.apache.ibatis.abator.core.config.FullyQualifiedTable;
import org.apache.ibatis.abator.core.internal.db.ColumnDefinition;
import org.apache.ibatis.abator.core.internal.db.ColumnDefinitions;
import org.apache.ibatis.abator.core.internal.types.ResolvedJavaType;
import org.apache.ibatis.abator.core.internal.util.StringUtility;

/**
 * @author Jeff Butler
 */
public class SqlMapGeneratorDefaultImpl implements SqlMapGenerator {

	private static final String INDENT = "  "; //$NON-NLS-1$

	private Map properties;

	private Map tableStringMaps;

	private String targetPackage;

	private String targetProject;

	private JavaModelGenerator javaModelGenerator;

	public SqlMapGeneratorDefaultImpl() {
		super();
		tableStringMaps = new HashMap();
	}

	private Map getTableStringMap(FullyQualifiedTable table) {
	    Map map = (Map) tableStringMaps.get(table);
	    if (map == null) {
	        map = new HashMap();
	        tableStringMaps.put(table, map);
	    }
	    
	    return map;
	}
	
	public void setProperties(Map properties) {
		this.properties = properties;
	}

	public void setTargetPackage(String targetPackage) {
		this.targetPackage = targetPackage;
	}

	public void setJavaModelGenerator(JavaModelGenerator javaModelGenerator) {
		this.javaModelGenerator = javaModelGenerator;
	}

	public GeneratedXmlFile getSqlMap(ColumnDefinitions columnDefinitions, TableConfiguration tableConfiguration) {
		StringBuffer commentSb = new StringBuffer();

		commentSb.append(INDENT);
		commentSb.append(INDENT);
		commentSb.append("<!--\n"); //$NON-NLS-1$
		commentSb.append(INDENT);
		commentSb.append(INDENT);
		commentSb.append("  WARNING - This element is automatically generated by Abator for iBATIS, do not modify.\n"); //$NON-NLS-1$
		commentSb.append(INDENT);
		commentSb.append(INDENT);
		commentSb.append("  This element was generated on "); //$NON-NLS-1$
		commentSb.append(new Date());
		commentSb.append(".\n"); //$NON-NLS-1$
		commentSb.append(INDENT);
		commentSb.append(INDENT);
		commentSb.append("-->\n"); //$NON-NLS-1$
		
		String comment = commentSb.toString(); 

		StringBuffer xml = new StringBuffer();

		xml.append("<?xml"); //$NON-NLS-1$
		addAttribute(xml, "version", "1.0", true); //$NON-NLS-1$ //$NON-NLS-2$
		addAttribute(xml, "encoding", "UTF-8", true); //$NON-NLS-1$ //$NON-NLS-2$
		xml.append("?>"); //$NON-NLS-1$

		newLine(xml);
		xml.append("<!DOCTYPE sqlMap PUBLIC"); //$NON-NLS-1$
		addQuotedString(xml, "-//iBATIS.com//DTD SQL Map 2.0//EN", true); //$NON-NLS-1$
		addQuotedString(xml, "http://ibatis.apache.org/dtd/sql-map-2.dtd", true); //$NON-NLS-1$
		xml.append(">"); //$NON-NLS-1$
		newLine(xml);

		xml.append("<sqlMap"); //$NON-NLS-1$
		addAttribute(xml, "namespace", getSqlMapNamespace(tableConfiguration.getTable()), true); //$NON-NLS-1$
		xml.append(">"); //$NON-NLS-1$
		newLine(xml);

		if (columnDefinitions.generateBaseResultMap(tableConfiguration)) {
			addResultMap(tableConfiguration.getTable(), columnDefinitions, xml, 1, comment);
			newLine(xml);
		}
		
		if (columnDefinitions.generateResultMapWithBLOBs(tableConfiguration)) {
			addResultMapWithBLOBs(tableConfiguration.getTable(), columnDefinitions, xml, 1, comment);
			newLine(xml);
		}

		if (tableConfiguration.isSelectByExampleStatementEnabled()
				|| tableConfiguration.isDeleteByExampleStatementEnabled()) {
			addByExampleWhereClauseFragment(columnDefinitions, xml, 1, comment);
			newLine(xml);
		}

		if (columnDefinitions.generateSelectByPrimaryKey(tableConfiguration)) {
			addSelectByPrimaryKey(tableConfiguration.getTable(), columnDefinitions, xml, 1, tableConfiguration, comment);
			newLine(xml);
		}

		if (columnDefinitions.generateSelectByExample(tableConfiguration)) {
			addSelectByExample(columnDefinitions, xml, 1, tableConfiguration, comment);
			newLine(xml);
		}

		if (columnDefinitions.generateSelectByExampleWithBLOBs(tableConfiguration)) {
			addSelectByExampleWithBLOBs(columnDefinitions, xml, 1, tableConfiguration, comment);
			newLine(xml);
		}

		if (columnDefinitions.generateDeleteByPrimaryKey(tableConfiguration)) {
			addDeleteByPrimaryKey(tableConfiguration.getTable(), columnDefinitions, xml, 1, comment);
			newLine(xml);
		}

		if (columnDefinitions.generateDeleteByExample(tableConfiguration)) {
			addDeleteByExample(tableConfiguration.getTable(), columnDefinitions, xml, 1, comment);
			newLine(xml);
		}

		if (columnDefinitions.generateInsert(tableConfiguration)) {
			addInsert(tableConfiguration.getTable(), columnDefinitions, tableConfiguration, xml, 1, comment);
			newLine(xml);
		}

		if (columnDefinitions.generateUpdateByPrimaryKeyWithBLOBs(tableConfiguration)) {
			addUpdateByPrimaryKeyWithBLOBs(tableConfiguration.getTable(), columnDefinitions, xml, 1, comment);
			newLine(xml);
		}

		if (columnDefinitions.generateUpdateByPrimaryKey(tableConfiguration)) {
			addUpdateByPrimaryKey(tableConfiguration.getTable(), columnDefinitions, xml, 1, comment);
			newLine(xml);
		}
		
		xml.append("</sqlMap>"); //$NON-NLS-1$
		newLine(xml);

		GeneratedXmlFile answer = new GeneratedXmlFile();
		answer.setContent(xml.toString());
		answer.setFileName(getSqlMapFileName(tableConfiguration.getTable()));
		answer.setTargetPackage(getSqlMapPackage(tableConfiguration.getTable()));
		answer.setTargetProject(targetProject);
		
		return answer;
	}

	private void addResultMap(FullyQualifiedTable table, ColumnDefinitions cds, StringBuffer xml,
			int baseIndent, String comment) {
		indent(xml, baseIndent);
		xml.append("<resultMap"); //$NON-NLS-1$
		addAttribute(xml, "id", getResultMapName(table), true); //$NON-NLS-1$
		if (cds.generateRecordExtendingNothing() || cds.generateRecordExtendingPrimaryKey()) {
			addAttribute(xml, "class", javaModelGenerator //$NON-NLS-1$
					.getRecordFullyQualifiedClassName(table), true);
		} else {
			addAttribute(xml, "class", javaModelGenerator //$NON-NLS-1$
					.getPrimaryKeyFullyQualifiedClassName(table), true);
		}
		xml.append(">"); //$NON-NLS-1$
		newLine(xml);
		
		xml.append(comment);

		Iterator iter = cds.getAllColumns().iterator();
		while (iter.hasNext()) {
			ColumnDefinition cd = (ColumnDefinition) iter.next();
			if (cd.isBLOBColumn()) {
				continue;
			}
			
			indent(xml, baseIndent + 1);
			xml.append("<result"); //$NON-NLS-1$
			addAttribute(xml, "column", cd.getColumnName(), true); //$NON-NLS-1$
			addAttribute(xml, "property", cd.getJavaProperty(), true); //$NON-NLS-1$
			addAttribute(
					xml,
					"jdbcType", cd.getResolvedJavaType().getJdbcTypeName(), true); //$NON-NLS-1$
			xml.append((" />")); //$NON-NLS-1$
			newLine(xml);
		}

		indent(xml, baseIndent);
		xml.append("</resultMap>"); //$NON-NLS-1$
		newLine(xml);
	}

	private void addResultMapWithBLOBs(FullyQualifiedTable table, ColumnDefinitions cds, StringBuffer xml,
			int baseIndent, String comment) {
		indent(xml, baseIndent);
		xml.append("<resultMap"); //$NON-NLS-1$
		addAttribute(xml, "id", getResultMapName(table) + "WithBLOBs", true); //$NON-NLS-1$
		addAttribute(xml, "class", javaModelGenerator //$NON-NLS-1$
				.getRecordWithBLOBsFullyQualifiedClassName(table), true);
		
		addAttribute(xml, "extends", getSqlMapNamespace(table) + "." + getResultMapName(table), true);
		
		xml.append(">"); //$NON-NLS-1$
		newLine(xml);
		
		xml.append(comment);

		Iterator iter = cds.getAllColumns().iterator();
		while (iter.hasNext()) {
			ColumnDefinition cd = (ColumnDefinition) iter.next();
			if (!cd.isBLOBColumn()) {
				continue;
			}
			
			indent(xml, baseIndent + 1);
			xml.append("<result"); //$NON-NLS-1$
			addAttribute(xml, "column", cd.getColumnName(), true); //$NON-NLS-1$
			addAttribute(xml, "property", cd.getJavaProperty(), true); //$NON-NLS-1$
			addAttribute(
					xml,
					"jdbcType", cd.getResolvedJavaType().getJdbcTypeName(), true); //$NON-NLS-1$
			xml.append((" />")); //$NON-NLS-1$
			newLine(xml);
		}

		indent(xml, baseIndent);
		xml.append("</resultMap>"); //$NON-NLS-1$
		newLine(xml);
	}
	
	private void addInsert(FullyQualifiedTable table, ColumnDefinitions cds, TableConfiguration tc,
			StringBuffer xml, int baseIndent, String comment) {

		ColumnDefinition identityColumn = null;

		indent(xml, baseIndent);
		xml.append("<insert"); //$NON-NLS-1$
		addAttribute(xml, "id", getInsertStatementId(), true); //$NON-NLS-1$
		if (cds.generateRecordWithBLOBsExtendingPrimaryKey() || cds.generateRecordWithBLOBsExtendingRecord()) {
			addAttribute(xml, "parameterClass", javaModelGenerator //$NON-NLS-1$
					.getRecordWithBLOBsFullyQualifiedClassName(table), true);
		} else if(cds.generateRecordExtendingNothing() || cds.generateRecordExtendingPrimaryKey()) {
			addAttribute(xml, "parameterClass", javaModelGenerator //$NON-NLS-1$
					.getRecordFullyQualifiedClassName(table), true);
		} else {
			addAttribute(xml, "parameterClass", javaModelGenerator //$NON-NLS-1$
					.getPrimaryKeyFullyQualifiedClassName(table), true);
		}
		xml.append(">"); //$NON-NLS-1$
		newLine(xml);
		
		xml.append(comment);
		
		if (tc.getGeneratedKey().isConfigured() 
		        && !tc.getGeneratedKey().isIdentity()) {
		    // pre-generated key
		    addSelectKey(xml, baseIndent, cds.getColumn(tc.getGeneratedKey().getColumn()), tc);
		}

		StringBuffer insertClause = new StringBuffer();
		StringBuffer valuesClause = new StringBuffer();
		StringBuffer insertFragment = new StringBuffer();
		StringBuffer valuesFragment = new StringBuffer();

		insertClause.append("insert into "); //$NON-NLS-1$
		insertClause.append(table.getFullyQualifiedTableName());
		insertClause.append(" ("); //$NON-NLS-1$

		valuesClause.append("values ("); //$NON-NLS-1$

		boolean comma = false;
		Iterator iter = cds.getAllColumns().iterator();
		while (iter.hasNext()) {
			ColumnDefinition cd = (ColumnDefinition) iter.next();

			if (cd.isIdentity()) {
				identityColumn = cd;
				// cannot set values on identity fields
				continue;
			}

			insertFragment.setLength(0);
			valuesFragment.setLength(0);

			valuesFragment.setLength(0);
			valuesFragment.append('#');
			valuesFragment.append(cd.getJavaProperty());
			valuesFragment.append(':');
			valuesFragment.append(cd.getResolvedJavaType().getJdbcTypeName());
			valuesFragment.append('#');

			insertFragment.append(cd.getColumnName());

			if (comma) {
				insertFragment.insert(0, ", "); //$NON-NLS-1$
				valuesFragment.insert(0, ", "); //$NON-NLS-1$
			} else {
				comma = true;
			}

			insertClause.append(insertFragment);
			valuesClause.append(valuesFragment);
		}
		insertClause.append(')');
		valuesClause.append(')');

		xml
				.append(formatLongString(insertClause.toString(), 80,
						baseIndent + 1));
		xml
				.append(formatLongString(valuesClause.toString(), 80,
						baseIndent + 1));

		if (identityColumn != null) {
			addSelectKey(xml, baseIndent, identityColumn, tc);
		}

		indent(xml, baseIndent);
		xml.append("</insert>"); //$NON-NLS-1$
		newLine(xml);
	}

	private void addUpdateByPrimaryKeyWithBLOBs(FullyQualifiedTable table, ColumnDefinitions cds,
			StringBuffer xml, int baseIndent, String comment) {

		indent(xml, baseIndent);
		xml.append("<update"); //$NON-NLS-1$
		addAttribute(xml, "id", getUpdateByPrimaryKeyWithBLOBsStatementId(), true); //$NON-NLS-1$
		addAttribute(xml, "parameterClass", javaModelGenerator //$NON-NLS-1$
				.getRecordWithBLOBsFullyQualifiedClassName(table), true);
		xml.append(">"); //$NON-NLS-1$
		newLine(xml);
		
		xml.append(comment);

		indent(xml, baseIndent + 1);
		xml.append("update "); //$NON-NLS-1$
		xml.append(table.getFullyQualifiedTableName());
		newLine(xml);
		indent(xml, baseIndent + 1);
		xml.append("set "); //$NON-NLS-1$

		StringBuffer fragment = new StringBuffer();
		boolean comma = false;
		Iterator iter = cds.getNonPrimaryKeyColumns().iterator();
		while (iter.hasNext()) {
			ColumnDefinition cd = (ColumnDefinition) iter.next();
			fragment.setLength(0);

			fragment.append(cd.getColumnName());
			fragment.append(" = #"); //$NON-NLS-1$
			fragment.append(cd.getJavaProperty());
			fragment.append(':');
			fragment.append(cd.getResolvedJavaType().getJdbcTypeName());
			fragment.append('#');

			if (comma) {
				xml.append(',');
				newLine(xml);
				indent(xml, baseIndent + 2);
			} else {
				comma = true;
			}

			xml.append(fragment);
		}

		newLine(xml);
		indent(xml, baseIndent + 1);
		xml.append("where "); //$NON-NLS-1$
		boolean and = false;
		iter = cds.getPrimaryKey().iterator();
		while (iter.hasNext()) {
			ColumnDefinition cd = (ColumnDefinition) iter.next();

			if (and) {
				xml.append(" and"); //$NON-NLS-1$
				newLine(xml);
				indent(xml, baseIndent + 2);
			} else {
				and = true;
			}

			xml.append(cd.getColumnName());
			xml.append(" = #"); //$NON-NLS-1$
			xml.append(cd.getJavaProperty());
			xml.append('#');
		}

		newLine(xml);
		indent(xml, baseIndent);
		xml.append("</update>"); //$NON-NLS-1$
		newLine(xml);
	}

	private void addUpdateByPrimaryKey(FullyQualifiedTable table, ColumnDefinitions cds,
			StringBuffer xml, int baseIndent, String comment) {

		indent(xml, baseIndent);
		xml.append("<update"); //$NON-NLS-1$
		addAttribute(xml, "id", getUpdateByPrimaryKeyStatementId(), true); //$NON-NLS-1$
		addAttribute(xml, "parameterClass", javaModelGenerator //$NON-NLS-1$
				.getRecordFullyQualifiedClassName(table), true);
		xml.append(">"); //$NON-NLS-1$
		newLine(xml);
		
		xml.append(comment);

		indent(xml, baseIndent + 1);
		xml.append("update "); //$NON-NLS-1$
		xml.append(table.getFullyQualifiedTableName());
		newLine(xml);
		indent(xml, baseIndent + 1);
		xml.append("set "); //$NON-NLS-1$

		StringBuffer fragment = new StringBuffer();
		boolean comma = false;
		Iterator iter = cds.getNonBLOBColumns().iterator();
		while (iter.hasNext()) {
			ColumnDefinition cd = (ColumnDefinition) iter.next();
			
			fragment.setLength(0);

			fragment.append(cd.getColumnName());
			fragment.append(" = #"); //$NON-NLS-1$
			fragment.append(cd.getJavaProperty());
			fragment.append(':');
			fragment.append(cd.getResolvedJavaType().getJdbcTypeName());
			fragment.append('#');

			if (comma) {
				xml.append(',');
				newLine(xml);
				indent(xml, baseIndent + 2);
			} else {
				comma = true;
			}

			xml.append(fragment);
		}

		newLine(xml);
		indent(xml, baseIndent + 1);
		xml.append("where "); //$NON-NLS-1$
		boolean and = false;
		iter = cds.getPrimaryKey().iterator();
		while (iter.hasNext()) {
			ColumnDefinition cd = (ColumnDefinition) iter.next();
			if (cd.isBLOBColumn()) {
				continue;
			}

			if (and) {
				xml.append(" and"); //$NON-NLS-1$
				newLine(xml);
				indent(xml, baseIndent + 2);
			} else {
				and = true;
			}

			xml.append(cd.getColumnName());
			xml.append(" = #"); //$NON-NLS-1$
			xml.append(cd.getJavaProperty());
			xml.append('#');
		}

		newLine(xml);
		indent(xml, baseIndent);
		xml.append("</update>"); //$NON-NLS-1$
		newLine(xml);
	}
	
	private void addDeleteByPrimaryKey(FullyQualifiedTable table, ColumnDefinitions cds,
			StringBuffer xml, int baseIndent, String comment) {

		indent(xml, baseIndent);
		xml.append("<delete"); //$NON-NLS-1$
		addAttribute(xml, "id", getDeleteByPrimaryKeyStatementId(), true); //$NON-NLS-1$
		addAttribute(xml, "parameterClass", javaModelGenerator //$NON-NLS-1$
				.getPrimaryKeyFullyQualifiedClassName(table), true);
		xml.append('>');
		newLine(xml);
		
		xml.append(comment);

		indent(xml, baseIndent + 1);
		xml.append("delete from "); //$NON-NLS-1$
		xml.append(table.getFullyQualifiedTableName());
		newLine(xml);

		indent(xml, baseIndent + 1);
		xml.append("where "); //$NON-NLS-1$
		boolean and = false;
		Iterator iter = cds.getPrimaryKey().iterator();
		while (iter.hasNext()) {
			ColumnDefinition cd = (ColumnDefinition) iter.next();
			if (and) {
				xml.append(" and"); //$NON-NLS-1$
				newLine(xml);
				indent(xml, baseIndent + 2);
			} else {
				and = true;
			}

			xml.append(cd.getColumnName());
			xml.append(" = #"); //$NON-NLS-1$
			xml.append(cd.getJavaProperty());
			xml.append('#');
		}

		newLine(xml);
		indent(xml, baseIndent);
		xml.append("</delete>"); //$NON-NLS-1$
		newLine(xml);
	}

	private void addDeleteByExample(FullyQualifiedTable table, ColumnDefinitions cds, StringBuffer xml,
			int baseIndent, String comment) {

		indent(xml, baseIndent);
		xml.append("<delete"); //$NON-NLS-1$
		addAttribute(xml, "id", getDeleteByExampleStatementId(), true); //$NON-NLS-1$
		addAttribute(xml, "parameterClass", "java.util.Map", true); //$NON-NLS-1$ //$NON-NLS-2$
		xml.append('>');
		newLine(xml);
		
		xml.append(comment);

		indent(xml, baseIndent + 1);
		xml.append("delete from "); //$NON-NLS-1$
		xml.append(table.getFullyQualifiedTableName());
		newLine(xml);

		indent(xml, baseIndent + 1);
		xml.append("<include"); //$NON-NLS-1$
		addAttribute(xml,
				"refid", getSqlMapNamespace(table) + "." + getExampleWhereClauseId(), true); //$NON-NLS-1$ //$NON-NLS-2$
		xml.append("/>"); //$NON-NLS-1$
		newLine(xml);

		indent(xml, baseIndent);
		xml.append("</delete>"); //$NON-NLS-1$
		newLine(xml);
	}

	private void addSelectByPrimaryKey(FullyQualifiedTable table, ColumnDefinitions cds,
			StringBuffer xml, int baseIndent, TableConfiguration tc, String comment) {

		indent(xml, baseIndent);
		xml.append("<select"); //$NON-NLS-1$
		addAttribute(xml, "id", getSelectByPrimaryKeyStatementId(), true); //$NON-NLS-1$
		if (cds.generateResultMapWithBLOBs(tc)) {
		    addAttribute(xml, "resultMap", getResultMapName(tc.getTable()) + "WithBLOBs", true); //$NON-NLS-1$
		} else {
		    addAttribute(xml, "resultMap", getResultMapName(tc.getTable()), true); //$NON-NLS-1$
		}
		addAttribute(xml, "parameterClass", javaModelGenerator //$NON-NLS-1$
				.getPrimaryKeyFullyQualifiedClassName(table), true);
		xml.append('>');
		newLine(xml);
		
		xml.append(comment);

		indent(xml, baseIndent + 1);
		xml.append("select "); //$NON-NLS-1$

		boolean comma = false;

		if (StringUtility.stringHasValue(tc.getSelectByPrimaryKeyQueryId())) {
			xml.append('\'');
			xml.append(tc.getSelectByPrimaryKeyQueryId());
			xml.append("' as QUERYID"); //$NON-NLS-1$
			comma = true;
		}

		Iterator iter = cds.getAllColumns().iterator();
		while (iter.hasNext()) {
			ColumnDefinition cd = (ColumnDefinition) iter.next();
			if (comma) {
				xml.append(',');
				newLine(xml);
				indent(xml, baseIndent + 2);
			} else {
				comma = true;
			}

			xml.append(cd.getColumnName());
		}

		newLine(xml);
		indent(xml, baseIndent + 1);
		xml.append("from "); //$NON-NLS-1$
		xml.append(table.getFullyQualifiedTableName());
		newLine(xml);
		indent(xml, baseIndent + 1);
		xml.append("where "); //$NON-NLS-1$

		boolean and = false;
		iter = cds.getPrimaryKey().iterator();
		while (iter.hasNext()) {
			ColumnDefinition cd = (ColumnDefinition) iter.next();
			if (and) {
				xml.append(" and"); //$NON-NLS-1$
				newLine(xml);
				indent(xml, baseIndent + 2);
			} else {
				and = true;
			}

			xml.append(cd.getColumnName());
			xml.append(" = #"); //$NON-NLS-1$
			xml.append(cd.getJavaProperty());
			xml.append('#');
		}

		newLine(xml);
		indent(xml, baseIndent);
		xml.append("</select>"); //$NON-NLS-1$
		newLine(xml);
	}

	private void indent(StringBuffer sb, int indentLevel) {
		for (int i = 0; i < indentLevel; i++) {
			sb.append(INDENT);
		}
	}

	private void addAttribute(StringBuffer sb, String name, String value,
			boolean spaceBefore) {
		if (spaceBefore) {
			sb.append(' ');
		}

		sb.append(name);
		sb.append('=');
		addQuotedString(sb, value, false);
	}

	private void addQuotedString(StringBuffer sb, String value,
			boolean spaceBefore) {
		if (spaceBefore) {
			sb.append(' ');
		}

		sb.append('\"');
		sb.append(value);
		sb.append('\"');
	}

	private void newLine(StringBuffer sb) {
		sb.append('\n'); //$NON-NLS-1$
	}

	private String formatLongString(String s, int maxLineLength,
			int indentLevel) {
		ArrayList lines = new ArrayList();
		StringTokenizer st = new StringTokenizer(s, " "); //$NON-NLS-1$

		StringBuffer sb = new StringBuffer();
		indent(sb, indentLevel);

		while (st.hasMoreTokens()) {
			String token = st.nextToken();

			if (sb.length() + token.length() + 1 > maxLineLength) {
				lines.add(sb.toString());
				sb.setLength(0);
				indent(sb, indentLevel + 1);
			}

			sb.append(token);
			sb.append(' ');
		}

		if (sb.length() > 0) {
			lines.add(sb.toString());
		}

		sb.setLength(0);
		Iterator iter = lines.iterator();
		while (iter.hasNext()) {
			sb.append(iter.next());
			newLine(sb);
		}

		return sb.toString();
	}

	private void addSelectKey(StringBuffer xml, int baseIndent,
			ColumnDefinition cd, TableConfiguration tc) {
		ResolvedJavaType rjt = cd.getResolvedJavaType();
		String identityColumnType = rjt.getFullyQualifiedName();

		newLine(xml);
		indent(xml, baseIndent + 1);
		xml.append("<selectKey"); //$NON-NLS-1$
		addAttribute(xml, "resultClass", identityColumnType, true); //$NON-NLS-1$
		addAttribute(xml, "keyProperty", cd.getJavaProperty(), true); //$NON-NLS-1$
		xml.append('>');
		newLine(xml);
		indent(xml, baseIndent + 2);
		xml.append(tc.getGeneratedKey().getSqlStatement());
		newLine(xml);
		indent(xml, baseIndent + 1);
		xml.append("</selectKey>"); //$NON-NLS-1$
		newLine(xml);
	}

	public String getSqlMapNamespace(FullyQualifiedTable table) {
		String key = "getSqlMapNamespace"; //$NON-NLS-1$
		String s;

		Map map = getTableStringMap(table);
		s = (String) map.get(key);
		if (s == null) {
			StringBuffer sb = new StringBuffer();

			if (StringUtility.stringHasValue(table.getCatalog())) {
				sb.append(table.getCatalog());
				sb.append('_');
			}

			if (StringUtility.stringHasValue(table.getSchema())) {
				sb.append(table.getSchema());
				sb.append('_');
			}

			sb.append(table.getTableName());

			s = sb.toString();
			map.put(key, s);
		}

		return s;
	}

	private String getResultMapName(FullyQualifiedTable table) {
		String key = "getResultMapName"; //$NON-NLS-1$
		String s;

		Map map = getTableStringMap(table);
		s = (String) map.get(key);
		if (s == null) {
			StringBuffer sb = new StringBuffer();

			sb.append("abatorgenerated_");
			sb.append(table.getDomainObjectName());
			sb.append("Result"); //$NON-NLS-1$

			s = sb.toString();
			map.put(key, s);
		}

		return s;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.apache.ibatis.generator.core.naming.NameGenerator#getSqlMapFileName(org.apache.ibatis.generator.core.db.TableDefinition)
	 */
	private String getSqlMapFileName(FullyQualifiedTable table) {
		String key = "getSqlMapFileName"; //$NON-NLS-1$
		String s;

		Map map = getTableStringMap(table);
		s = (String) map.get(key);
		if (s == null) {
			StringBuffer sb = new StringBuffer();

			if (StringUtility.stringHasValue(table.getCatalog())) {
				sb.append(table.getCatalog());
				sb.append('_');
			}

			if (StringUtility.stringHasValue(table.getSchema())) {
				sb.append(table.getSchema());
				sb.append('_');
			}

			sb.append(table.getTableName());
			sb.append("_SqlMap.xml"); //$NON-NLS-1$

			s = sb.toString();
			map.put(key, s);
		}

		return s;
	}

	public String getDeleteByPrimaryKeyStatementId() {
		return "abatorgenerated_deleteByPrimaryKey"; //$NON-NLS-1$
	}

	public String getDeleteByExampleStatementId() {
		return "abatorgenerated_deleteByExample"; //$NON-NLS-1$
	}

	public String getInsertStatementId() {
		return "abatorgenerated_insert"; //$NON-NLS-1$
	}

	public String getSelectByPrimaryKeyStatementId() {
		return "abatorgenerated_selectByPrimaryKey"; //$NON-NLS-1$
	}

	public String getSelectByExampleStatementId() {
		return "abatorgenerated_selectByExample"; //$NON-NLS-1$
	}

	public String getSelectByExampleWithBLOBsStatementId() {
		return "abatorgenerated_selectByExampleWithBLOBs"; //$NON-NLS-1$
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.apache.ibatis.generator.api.naming.NameGenerator#getUpdateByPrimaryKeyStatementId()
	 */
	public String getUpdateByPrimaryKeyWithBLOBsStatementId() {
		return "abatorgenerated_updateByPrimaryKeyWithBLOBs"; //$NON-NLS-1$
	}

	public String getUpdateByPrimaryKeyStatementId() {
		return "abatorgenerated_updateByPrimaryKey"; //$NON-NLS-1$
	}

	private String getSqlMapPackage(FullyQualifiedTable table) {
		String key = "getSqlMapPackage"; //$NON-NLS-1$
		String s;

		Map map = getTableStringMap(table);
		s = (String) map.get(key);
		if (s == null) {
			if ("true".equals(properties.get("enableSubPackages"))) { //$NON-NLS-1$ //$NON-NLS-2$
				StringBuffer sb = new StringBuffer(targetPackage);

				if (StringUtility.stringHasValue(table.getCatalog())) {
					sb.append('.');
					sb.append(table.getCatalog().toLowerCase());
				}

				if (StringUtility.stringHasValue(table.getSchema())) {
					sb.append('.');
					sb.append(table.getSchema().toLowerCase());
				}

				s = sb.toString();
			} else {
				s = targetPackage;
			}

			map.put(key, s);
		}

		return s;
	}
	
	private String getExampleWhereClauseId() {
		return "abatorgenerated_Example_Where_Clause";
	}

	private void addByExampleWhereClauseFragment(ColumnDefinitions cds,
			StringBuffer xml, int baseIndent, String comment) {
		indent(xml, baseIndent);
		xml.append("<sql"); //$NON-NLS-1$
		addAttribute(xml, "id", getExampleWhereClauseId(), true); //$NON-NLS-1$ //$NON-NLS-2$
		xml.append('>');
		newLine(xml);
		
		xml.append(comment);

		indent(xml, baseIndent + 1);
		xml.append("<dynamic"); //$NON-NLS-1$
		addAttribute(xml, "prepend", "where", true); //$NON-NLS-1$ //$NON-NLS-2$
		xml.append('>');
		newLine(xml);

		Iterator iter = cds.getAllColumns().iterator();
		while (iter.hasNext()) {
			ColumnDefinition cd = (ColumnDefinition) iter.next();

			if (cd.isBLOBColumn()) {
				// don't generate select by example clauses for BLOBs
				continue;
			}

			Iterator clauseIterator = ExampleClause.getAllExampleClauses();
			while (clauseIterator.hasNext()) {
				ExampleClause ec = (ExampleClause) clauseIterator.next();

				if (ec.isCharacterOnly() && !cd.isCharacterColumn()) {
					continue;
				}

				indent(xml, baseIndent + 2);
				xml.append("<isPropertyAvailable"); //$NON-NLS-1$
				addAttribute(xml, "prepend", "and", true); //$NON-NLS-1$ //$NON-NLS-2$
				addAttribute(xml, "property", ec.getSelectorAndProperty(cd), //$NON-NLS-1$
						true);
				xml.append('>');
				newLine(xml);

				indent(xml, baseIndent + 3);
				xml.append(ec.getClause(cd));
				newLine(xml);

				indent(xml, baseIndent + 2);
				xml.append("</isPropertyAvailable>"); //$NON-NLS-1$
				newLine(xml);

				indent(xml, baseIndent + 2);
				xml.append("<isPropertyAvailable"); //$NON-NLS-1$
				addAttribute(xml, "prepend", "or", true); //$NON-NLS-1$ //$NON-NLS-2$
				addAttribute(xml, "property", ec.getSelectorOrProperty(cd), //$NON-NLS-1$
						true);
				xml.append('>');
				newLine(xml);

				indent(xml, baseIndent + 3);
				xml.append(ec.getClause(cd));
				newLine(xml);

				indent(xml, baseIndent + 2);
				xml.append("</isPropertyAvailable>"); //$NON-NLS-1$
				newLine(xml);
			}
		}

		indent(xml, baseIndent + 1);
		xml.append("</dynamic>"); //$NON-NLS-1$
		newLine(xml);

		indent(xml, baseIndent);
		xml.append("</sql>"); //$NON-NLS-1$
		newLine(xml);
	}

	private void addSelectByExample(ColumnDefinitions cds, StringBuffer xml,
			int baseIndent, TableConfiguration tc, String comment) {

		indent(xml, baseIndent);
		xml.append("<select"); //$NON-NLS-1$
		addAttribute(xml, "id", getSelectByExampleStatementId(), true); //$NON-NLS-1$
		addAttribute(xml, "resultMap", getResultMapName(tc.getTable()), true); //$NON-NLS-1$
		addAttribute(xml, "parameterClass", "java.util.Map", true); //$NON-NLS-1$ //$NON-NLS-2$
		xml.append('>');
		newLine(xml);
		
		xml.append(comment);

		indent(xml, baseIndent + 1);
		xml.append("select "); //$NON-NLS-1$

		boolean comma = false;

		if (StringUtility.stringHasValue(tc.getSelectByExampleQueryId())) {
			xml.append('\'');
			xml.append(tc.getSelectByExampleQueryId());
			xml.append("' as QUERYID"); //$NON-NLS-1$
			comma = true;
		}

		Iterator iter = cds.getAllColumns().iterator();
		while (iter.hasNext()) {
			ColumnDefinition cd = (ColumnDefinition) iter.next();

			if (cd.isBLOBColumn()) {
				// don't return BLOBs in select be examples
				continue;
			}

			if (comma) {
				xml.append(',');
				newLine(xml);
				indent(xml, baseIndent + 2);
			} else {
				comma = true;
			}

			xml.append(cd.getColumnName());
		}

		newLine(xml);
		indent(xml, baseIndent + 1);
		xml.append("from "); //$NON-NLS-1$
		xml.append(tc.getTable().getFullyQualifiedTableName());
		newLine(xml);

		indent(xml, baseIndent + 1);
		xml.append("<include"); //$NON-NLS-1$
		addAttribute(xml,
				"refid", getSqlMapNamespace(tc.getTable()) + "." + getExampleWhereClauseId(), true); //$NON-NLS-1$ //$NON-NLS-2$
		xml.append("/>"); //$NON-NLS-1$
		newLine(xml);

		indent(xml, baseIndent + 1);
		xml.append("<isPropertyAvailable"); //$NON-NLS-1$
		addAttribute(xml, "property", "ABATOR_ORDER_BY_CLAUSE", true); //$NON-NLS-1$ //$NON-NLS-2$
		xml.append('>');
		newLine(xml);

		indent(xml, baseIndent + 2);
		xml.append("order by $ABATOR_ORDER_BY_CLAUSE$"); //$NON-NLS-1$
		newLine(xml);

		indent(xml, baseIndent + 1);
		xml.append("</isPropertyAvailable>"); //$NON-NLS-1$
		newLine(xml);

		indent(xml, baseIndent);
		xml.append("</select>"); //$NON-NLS-1$
		newLine(xml);
	}

	private void addSelectByExampleWithBLOBs(ColumnDefinitions cds, StringBuffer xml,
			int baseIndent, TableConfiguration tc, String comment) {

		indent(xml, baseIndent);
		xml.append("<select"); //$NON-NLS-1$
		addAttribute(xml, "id", getSelectByExampleWithBLOBsStatementId(), true); //$NON-NLS-1$
		addAttribute(xml, "resultMap", getResultMapName(tc.getTable()) + "WithBLOBs", true); //$NON-NLS-1$
		addAttribute(xml, "parameterClass", "java.util.Map", true); //$NON-NLS-1$ //$NON-NLS-2$
		xml.append('>');
		newLine(xml);
		
		xml.append(comment);

		indent(xml, baseIndent + 1);
		xml.append("select "); //$NON-NLS-1$

		boolean comma = false;

		if (StringUtility.stringHasValue(tc.getSelectByExampleQueryId())) {
			xml.append('\'');
			xml.append(tc.getSelectByExampleQueryId());
			xml.append("' as QUERYID"); //$NON-NLS-1$
			comma = true;
		}

		Iterator iter = cds.getAllColumns().iterator();
		while (iter.hasNext()) {
			ColumnDefinition cd = (ColumnDefinition) iter.next();

			if (comma) {
				xml.append(',');
				newLine(xml);
				indent(xml, baseIndent + 2);
			} else {
				comma = true;
			}

			xml.append(cd.getColumnName());
		}

		newLine(xml);
		indent(xml, baseIndent + 1);
		xml.append("from "); //$NON-NLS-1$
		xml.append(tc.getTable().getFullyQualifiedTableName());
		newLine(xml);

		indent(xml, baseIndent + 1);
		xml.append("<include"); //$NON-NLS-1$
		addAttribute(xml,
				"refid", getSqlMapNamespace(tc.getTable()) + "." + getExampleWhereClauseId(), true); //$NON-NLS-1$ //$NON-NLS-2$
		xml.append("/>"); //$NON-NLS-1$
		newLine(xml);

		indent(xml, baseIndent + 1);
		xml.append("<isPropertyAvailable"); //$NON-NLS-1$
		addAttribute(xml, "property", "ABATOR_ORDER_BY_CLAUSE", true); //$NON-NLS-1$ //$NON-NLS-2$
		xml.append('>');
		newLine(xml);

		indent(xml, baseIndent + 2);
		xml.append("order by $ABATOR_ORDER_BY_CLAUSE$"); //$NON-NLS-1$
		newLine(xml);

		indent(xml, baseIndent + 1);
		xml.append("</isPropertyAvailable>"); //$NON-NLS-1$
		newLine(xml);

		indent(xml, baseIndent);
		xml.append("</select>"); //$NON-NLS-1$
		newLine(xml);
	}
	
    public void setTargetProject(String targetProject) {
        this.targetProject = targetProject;
    }
}

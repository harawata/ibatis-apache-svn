<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap
    PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"
    "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="Account">

  <typeAlias alias="account" type="testdomain.Account"/>

  <cacheModel id="account-cache" type="LRU" readOnly="true">
    <flushInterval hours="24"/>
    <flushOnExecute statement="updateAccountViaInlineParameters"/>
  </cacheModel>

  <cacheModel id="rw-account-cache" type="FIFO" serialize="true" readOnly="false">
    <flushInterval hours="24"/>
    <flushOnExecute statement="updateAccountViaInlineParameters"/>
  </cacheModel>

  <resultMap id="cached-account-result" class="account">
    <result property="id" column="ACC_ID"/>
    <result property="firstName" column="ACC_FIRST_NAME"/>
    <result property="lastName" column="ACC_LAST_NAME"/>
    <result property="emailAddress" column="ACC_EMAIL"/>
  </resultMap>

  <resultMap id="broken-account-result" class="account">
    <result property="id" javaType="java.lang.Integer" jdbcType="INTEGER" column="ACC_ID"/>
    <result property="firstName" javaType="java.lang.String" jdbcType="VARCHAR" column="ACC_FIRST_NAME"/>
    <result property="lastName" javaType="java.lang.String" jdbcType="VARCHAR" column="ACC_LAST_NAME"/>
    <result property="emailAddress" javaType="java.lang.String" jdbcType="VARCHAR" column="ACC_EMAIL"/>
    <result property="age" javaType="java.lang.Long" jdbcType="NUMERIC" column="ACC_AGE"/>
    <result property="dateAdded" javaType="java.util.Date" jdbcType="DATE" column="ACC_DATE_ADDED"/>
  </resultMap>

  <resultMap id="account-result-nullable-email" class="account">
    <result property="id" jdbcType="NUMERIC" column="ACC_ID"/>
    <result property="firstName" jdbcType="VARCHAR" column="ACC_FIRST_NAME"/>
    <result property="lastName" jdbcType="VARCHAR" column="ACC_LAST_NAME"/>
    <result property="emailAddress" jdbcType="VARCHAR" column="ACC_EMAIL"/>
  </resultMap>

  <resultMap id="account-result" class="account">
    <result property="id" jdbcType="NUMERIC" column="ACC_ID"/>
    <result property="firstName" jdbcType="VARCHAR" column="ACC_FIRST_NAME"/>
    <result property="lastName" jdbcType="VARCHAR" column="ACC_LAST_NAME"/>
    <result property="emailAddress" jdbcType="VARCHAR" column="ACC_EMAIL" nullValue="no_email@provided.com"/>
  </resultMap>

  <resultMap id="nested-account-result" class="account">
    <result property="id" jdbcType="NUMERIC" column="ACC_ID"/>
    <result property="firstName" jdbcType="VARCHAR" column="ACC_FIRST_NAME"/>
    <result property="lastName" jdbcType="VARCHAR" column="ACC_LAST_NAME"/>
    <result property="emailAddress" jdbcType="VARCHAR" column="ACC_EMAIL" nullValue="no_email@provided.com"/>
    <result property="account.account" column="ACC_ID" select="getAccountViaColumnName" />
  </resultMap>

  <resultMap id="indexed-account-result" class="account">
    <result property="id" column="ACC_ID" columnIndex="1"/>
    <result property="firstName" column="ACC_FIRST_NAME" columnIndex="2"/>
    <result property="lastName" column="ACC_LAST_NAME" columnIndex="3"/>
    <result property="emailAddress" column="ACC_EMAIL" columnIndex="4" nullValue="no_email@provided.com"/>
  </resultMap>

  <resultMap id="account-hashmap-result" class="java.util.HashMap">
    <result property="id" column="ACC_ID"/>
    <result property="firstName" column="ACC_FIRST_NAME"/>
    <result property="lastName" column="ACC_LAST_NAME"/>
    <result property="emailAddress" column="ACC_EMAIL"/>
  </resultMap>

  <resultMap id="email-result" class="java.lang.String">
    <result property="value" column="ACC_EMAIL"/>
  </resultMap>

  <select id="getEmailAddressViaResultClass"
    parameterClass="java.lang.Integer"
    resultClass="java.lang.String">
    select ACC_EMAIL as value
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getEmailAddressViaResultMap"
    parameterClass="java.lang.Integer"
    resultMap="email-result">
    select ACC_EMAIL
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getDynamicOrderedEmailAddressesViaResultMap"
    resultMap="email-result">
    select ACC_EMAIL
    from ACCOUNT
    ORDER BY $value$
  </select>


  <select id="getAllEmailAddressesViaResultClass"
    resultClass="java.lang.String">
    select ACC_EMAIL as value
    from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getAllEmailAddressesViaResultMap"
    resultMap="email-result">
    select ACC_EMAIL
    from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getAccountViaResultClass"
    parameterClass="java.lang.Integer"
    resultClass="account">
    <![CDATA[
    select
      ACC_ID as id,
      ACC_FIRST_NAME as firstName,
      ACC_LAST_NAME as lastName,
      ACC_EMAIL as emailAddress
    from ACCOUNT
    where ACC_ID = #value#
    and ACC_ID = #value#
    ]]>
  </select>

  <select id="getAccountViaColumnName"
    parameterClass="java.lang.Integer"
    resultMap="account-result">
    select
      ACC_ID,
      ACC_FIRST_NAME,
      ACC_LAST_NAME,
      ACC_EMAIL
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getNestedAccountViaColumnName"
    parameterClass="java.lang.Integer"
    resultMap="nested-account-result">
    select
      ACC_ID,
      ACC_FIRST_NAME,
      ACC_LAST_NAME,
      ACC_EMAIL
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getSuperAccount"
    parameterClass="testdomain.SuperAccount"
    resultClass="testdomain.SuperAccount">
    select
      ACC_ID as id,
      ACC_FIRST_NAME as firstName,
      ACC_LAST_NAME as lastName,
      ACC_EMAIL as emailAddress
    from ACCOUNT
    where ACC_ID = #id#
  </select>

  <select id="getAccountNullableEmail"
    parameterClass="java.lang.Integer"
    resultMap="account-result-nullable-email">
    select
      ACC_ID,
      ACC_FIRST_NAME,
      ACC_LAST_NAME,
      ACC_EMAIL
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getAccountViaColumnIndex"
    parameterClass="java.lang.Integer"
    resultMap="indexed-account-result">
    select
      ACC_ID,
      ACC_FIRST_NAME,
      ACC_LAST_NAME,
      ACC_EMAIL
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getAccountAsHashMap"
    parameterClass="java.lang.Integer"
    resultMap="account-hashmap-result">
    select *
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getAccountAsHashMapResultClass"
    parameterClass="java.lang.Integer"
    resultClass="java.util.HashMap">
    select
      ACC_ID as id,
      ACC_FIRST_NAME as firstName,
      ACC_LAST_NAME as lastName,
      ACC_EMAIL as emailAddress
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getAllAccountsViaResultMap"
    resultMap="account-result">
    select * from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getBrokenAllAccountsViaResultMap"
    resultMap="broken-account-result">
    select * from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getNoAccountsViaResultMap"
    resultMap="account-result">
    select * from ACCOUNT
    where ACC_ID > 1000
    order by ACC_ID
  </select>

  <select id="getFewAccountsViaResultMap"
    resultMap="account-result">
    <![CDATA[
    select * from ACCOUNT
    where ACC_ID < 2
    order by ACC_ID
    ]]>
  </select>

  <select id="getAllAccountsViaResultMapWithDynamicElement"
    resultMap="account-result">
    select * from ACCOUNT
    where ACC_EMAIL $value$ '%@%'
    order by ACC_ID
  </select>


  <select id="getCachedAccountsViaResultMap"
    resultMap="account-result"
    cacheModel="account-cache">
    select * from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getRWCachedAccountsViaResultMap"
    resultMap="account-result"
    cacheModel="rw-account-cache">
    select * from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getAllAccountsViaResultClass"
    resultClass="account">
    select
      ACC_ID as id,
      ACC_FIRST_NAME as firstName,
      ACC_LAST_NAME as lastName,
      ACC_EMAIL as emailAddress
    from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getAllAccountsAsHashMapViaResultMap"
    resultMap="account-hashmap-result">
    select * from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getAllAccountsAsHashMapViaResultClass"
    resultClass="java.util.HashMap">
    select
      ACC_ID as id,
      ACC_FIRST_NAME as firstName,
      ACC_LAST_NAME as lastName,
      ACC_EMAIL as emailAddress
    from ACCOUNT
    order by ACC_ID
  </select>

  <delete id="deleteAccount"
    parameterClass="account">
    delete from ACCOUNT
    where ACC_ID = #id#
    and ACC_ID = #id#
  </delete>

  <delete id="deleteAccountByDuplicateInteger"
    >
    delete from ACCOUNT
    where ACC_ID = #value#
    and ACC_ID = #value#
  </delete>


  <update id="updateAccountViaInlineParameters"
    parameterClass="account">
    update ACCOUNT set
      ACC_FIRST_NAME = #firstName#,
      ACC_LAST_NAME = #lastName#,
      ACC_EMAIL = #emailAddress:VARCHAR:no_email@provided.com#
    where
      ACC_ID = #id#
  </update>

  <parameterMap id="insert-params" class="account">
    <parameter property="id"/>
    <parameter property="firstName"/>
    <parameter property="lastName"/>
    <parameter property="emailAddress" jdbcType="VARCHAR" nullValue="no_email@provided.com"/>
  </parameterMap>

  <insert id="insertAccountViaParameterMap"
    parameterMap="insert-params">
    insert into ACCOUNT (
      ACC_ID,
      ACC_FIRST_NAME,
      ACC_LAST_NAME,
      ACC_EMAIL)
    values (
      ?, ?, ?, ?
    )
  </insert>

  <insert id="insertAccountViaInlineParameters"
    parameterClass="account"
    >
    insert into ACCOUNT (
      ACC_ID,
      ACC_FIRST_NAME,
      ACC_LAST_NAME,
      ACC_EMAIL)
    values (
      #id#,
      #firstName#,
      #lastName#,
      #emailAddress:VARCHAR:no_email@provided.com#
    )
  </insert>

  <insert id="insertAccountNullableEmail"
    parameterClass="account"
    >
    insert into ACCOUNT (
      ACC_ID,
      ACC_FIRST_NAME,
      ACC_LAST_NAME,
      ACC_EMAIL)
    values (
      #id#,
      #firstName#,
      #lastName#,
      #emailAddress:VARCHAR#
    )
  </insert>

  <insert id="insertAccountUknownParameterClass">
    insert into ACCOUNT (
      ACC_ID,
      ACC_FIRST_NAME,
      ACC_LAST_NAME,
      ACC_EMAIL)
    values (
      #id#,
      #firstName#,
      #lastName#,
      #emailAddress:VARCHAR#
    )
  </insert>

</sqlMap>
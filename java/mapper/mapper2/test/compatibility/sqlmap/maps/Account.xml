<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sql-map
    PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN"
    "http://www.ibatis.com/dtd/sql-map.dtd">

<!-- Always ensure to use the correct XML header as above! -->

<sql-map name="Account">

  <!-- =============================================
                  CACHE CONFIGURATION
       ============================================= -->

  <cache-model name="account-cache" implementation="LRU">
    <flush-interval hours="24"/>
    <flush-on-execute statement="insertAccount"/>
    <flush-on-execute statement="updateAccount"/>
    <flush-on-execute statement="deleteAccount"/>

    <cache-property name="cache-size" value="100" />

  </cache-model>

  <!-- =============================================
                  RESULT MAP - JavaBean
       ============================================= -->

  <result-map name="account-result" class="compatibility.domain.Account">
    <property name="id" column="ACC_ID" />
    <property name="firstName" column="ACC_FIRST_NAME"/>
    <property name="lastName" column="ACC_LAST_NAME"/>
    <property name="emailAddress" column="ACC_EMAIL" null="no_email@provided.com"/>
    <property name="address" column="ACC_ID" mapped-statement="getAddressForAccount"/>
  </result-map>

<!--
  <result-map name="indexed-account-result" class="compatibility.domain.Account">
    <property name="id"           column="ACC_ID"         columnIndex="1"/>
    <property name="firstName"    column="ACC_FIRST_NAME" columnIndex="2"/>
    <property name="lastName"     column="ACC_LAST_NAME"  columnIndex="3"/>
    <property name="emailAddress" column="ACC_ID"      columnIndex="1"  null="no_email@provided.com" mapped-statement="getEmailAddress"/>
    <property name="address"      column="ACC_ID"         columnIndex="1"  mapped-statement="getAddressForAccount"/>
  </result-map>
-->

  <result-map name="indexed-account-result" class="compatibility.domain.Account">
    <property name="id"           column="ACC_ID"         />
    <property name="firstName"    column="ACC_FIRST_NAME" />
    <property name="lastName"     column="ACC_LAST_NAME"  />
    <property name="emailAddress" column="ACC_ID"       null="no_email@provided.com" mapped-statement="getEmailAddress"/>
    <property name="address"      column="ACC_ID"       mapped-statement="getAddressForAccount"/>
  </result-map>

  <!-- =============================================
                  RESULT MAP - HashMap
       ============================================= -->

  <result-map name="account-hashmap-result" class="java.util.HashMap">
    <property name="id" column="ACC_ID"/>
    <property name="firstName" column="ACC_FIRST_NAME"/>
    <property name="lastName" column="ACC_LAST_NAME"/>
    <property name="emailAddress" column="ACC_EMAIL"/>
  </result-map>

  <!-- =============================================
        RESULT MAP - Simple Type not used in this example...
       ============================================= -->

  <result-map name="email-result" class="java.lang.String">
    <property name="val" column="ACC_EMAIL"/>
  </result-map>

  <!-- =============================================
           MAPPED STATEMENTS - w/Inline Parameters
       ============================================= -->

  <mapped-statement name="getEmailAddresses" parameter-class="java.lang.String" cache-model="account-cache" result-class="java.lang.String">
    select ACC_EMAIL as value
    from ACCOUNT
    where ACC_EMAIL like #value#
  </mapped-statement>

  <mapped-statement name="getEmailAddress" parameter-class="java.lang.Integer" cache-model="account-cache" result-class="java.lang.String">
    select ACC_EMAIL as value
    from ACCOUNT
    where ACC_ID = #value#
  </mapped-statement>

  <mapped-statement name="getAccount" cache-model="account-cache" parameter-class="java.lang.Integer" result-map="indexed-account-result">
    select
      ACC_ID,
      ACC_FIRST_NAME,
      ACC_LAST_NAME,
      ACC_EMAIL
    from ACCOUNT
    where ACC_ID = #value#
  </mapped-statement>

  <mapped-statement name="getAccountIdAndName" parameter-class="java.lang.Integer" result-class="compatibility.domain.Account">
    select
      ACC_ID as id,
      ACC_FIRST_NAME as firstName,
      ACC_LAST_NAME as lastName
    from ACCOUNT
    where ACC_ID = #value#
  </mapped-statement>

  <mapped-statement name="getAccountEmail" parameter-class="java.lang.Integer" result-class="compatibility.domain.Account">
    select
      ACC_EMAIL as emailAddress
    from ACCOUNT
    where ACC_ID = #value#
  </mapped-statement>

  <mapped-statement name="getAccountAsHashMap" parameter-class="java.util.HashMap" cache-model="account-cache" result-map="account-hashmap-result">
    select * from ACCOUNT
    where ACC_ID = #id#
  </mapped-statement>

  <mapped-statement name="getAllAccounts" cache-model="account-cache" result-map="account-result">
    <![CDATA[
    select * from ACCOUNT
    ]]>
  </mapped-statement>

  <mapped-statement name="getAllAccountsAsHashMaps" cache-model="account-cache" result-map="account-hashmap-result">
    <![CDATA[
    select * from ACCOUNT
    ]]>
  </mapped-statement>

  <mapped-statement name="deleteAccount" parameter-class="compatibility.domain.Account">
    delete from ACCOUNT
    where ACC_ID = #id#
  </mapped-statement>

  <!-- =============================================
       Inline Parameter specifying type and null value.
       ============================================= -->

  <mapped-statement name="updateAccount" parameter-class="compatibility.domain.Account">
    update ACCOUNT set
      ACC_FIRST_NAME = #firstName#,
      ACC_LAST_NAME = #lastName#,
      ACC_EMAIL = #emailAddress:VARCHAR:no_email@provided.com#
    where
      ACC_ID = #id#
  </mapped-statement>

  <!-- =============================================
              OPTIONAL EXPLICIT PARAMETER MAP
       ============================================= -->

  <!-- =============================================
        MAPPED STATEMENTS - w/Explicit Parameter Map
       ============================================= -->

  <mapped-statement name="insertAccount" parameter-class="compatibility.domain.Account">
    insert into ACCOUNT (
      ACC_ID,
      ACC_FIRST_NAME,
      ACC_LAST_NAME,
      ACC_EMAIL)
    values (
      #id#, #firstName#, #lastName#, #emailAddress#
    )
  </mapped-statement>

  <!-- =============================================
                 DYNAMIC MAPPED STATEMENTS
       ============================================= -->

  <dynamic-mapped-statement name="dynamicGetAccountList" cache-model="account-cache" result-map="account-result" parameter-class="compatibility.domain.Account">
    select * from ACCOUNT
    <dynamic prepend="WHERE">
      <isNotNull prepend="AND" property="firstName">
        (ACC_FIRST_NAME = #firstName#
        <isNotNull prepend="OR" property="lastName">
          ACC_LAST_NAME = #lastName#
        </isNotNull>
        )
      </isNotNull>
      <isNotNull prepend="AND" property="emailAddress">
        ACC_EMAIL like #emailAddress#
      </isNotNull>
      <isGreaterThan prepend="AND" property="id" compareValue="0">
        ACC_ID = #id#
      </isGreaterThan>
    </dynamic>
    order by ACC_LAST_NAME
  </dynamic-mapped-statement>

</sql-map>
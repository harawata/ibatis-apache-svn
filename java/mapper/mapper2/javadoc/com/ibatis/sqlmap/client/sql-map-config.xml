<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMapConfig
    PUBLIC "-//iBATIS.com//DTD SQL Map Config 2.0//EN"
    "http://www.ibatis.com/dtd/sql-map-config-2.dtd">

<!-- Be sure to always use the appropriate header as above!  Note the 2.0 DTDs. -->

<sqlMapConfig>


  <!-- Using the properties element you can declare an external properties resource
       either from the classpath (resource) or from a URL (e.g. file:// or http://)
       The properties can be referred to throughout the rest of the file using
       the syntax "${propName}". There can be only one properties element. -->

  <properties resource="" url=""/>

  <!-- The settings element has a number of configuration switches and properties
       that configure the SQL Maps engine. Most are performance tweaks or resource
       management.  They are pretty self explanatory. The defaults are shown here.
       There can be only one settins element.  -->

  <settings
    lazyLoadingEnabled="true"
    cacheModelsEnabled="true"
    enhancementEnabled="true"
    maxRequests="512"
    maxSessions="128"
    maxTransactions="32" 
    />

  <!-- A type alias can be used to declare a shorter name for a long fully qualified
       classname.  There can be any number of typeAlias elements.  -->

  <typeAlias alias="shortname" type="com.long.class.path.Class"/>

  <!-- The transaction manager stanza configures a transaction manager such as
       JDBC or JTA.  The following are two examples of transaction managers.
       There can be only ONE defined (uncommented) at a time.  -->

  <!-- This first transaction manager stanza uses JDBC to manage the transactions.
       Within it a dataSource stanza in this case configures SimpleDataSource
       instance that will provide connection pooling services. -->

  <transactionManager type="JDBC">
    <dataSource type="SIMPLE">
      <property name="" value=""/>
      <property name="" value=""/>
      <property name="" value=""/>
    </dataSource>
  </transactionManager>

  <!-- The commented-out transaction manager stanza below uses JTA to manage
       the transactions a global (e.g. distributed) transaction. Within it a
       properties element sets the JNDI path where the JTA UserTransaction
       can be found.  Then, a dataSource stanza is used to configure
       the JNDI lookup for the DataSource from which Connections can be
       opened. -->

  <!--
  <transactionManager type="JTA" >
    <property name="UserTransaction" value="java:/ctx/con"/>
    <dataSource type="JNDI">
      <property name="" value=""/>
      <property name="" value=""/>
      <property name="" value=""/>
    </dataSource>
  </transactionManager>
  -->

  <!-- Finally, the SQL Maps themselves must be registred with the configuration file.
       Below are some examples of some SQL Map reference elements.  Notice that an
       SQL Map can  be located in the classpath (resource) or at a URL (e.g. file://
       or http://).  There can be any number of sqlMap elements. -->

  <sqlMap resource="com.mydomain.sqlmaps.MySqlMap.xml" />
  <!--
  <sqlMap url="file://C:/config/FileSqlMap.xml" />
  <sqlMap url="http://www.ibatis.com/maps/WebSqlMap.xml" />
  -->

</sqlMapConfig>


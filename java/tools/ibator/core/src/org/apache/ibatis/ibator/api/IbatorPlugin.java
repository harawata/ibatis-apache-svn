/*
 *  Copyright 2008 The Apache Software Foundation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.apache.ibatis.ibator.api;

import java.util.List;
import java.util.Properties;

import org.apache.ibatis.ibator.api.dom.java.Interface;
import org.apache.ibatis.ibator.api.dom.java.Method;
import org.apache.ibatis.ibator.api.dom.java.TopLevelClass;
import org.apache.ibatis.ibator.api.dom.xml.XmlElement;
import org.apache.ibatis.ibator.config.IbatorContext;

/**
 * This interface defines methods that will be called by ibatror at different
 * times during the code generation process.  These methods can be used to
 * extend or modify the code generated by ibator.  Clients may implement this
 * interface in its entirety, or extend the IbatorPluginAdapter (recomended). 
 * 
 * @author Jeff Butler
 *
 */
public interface IbatorPlugin {
    /**
     * Set the context under which this plugin is running
     * 
     * @param ibatorContext
     */
    void setIbatorContext(IbatorContext ibatorContext);
    
    /**
     * Set properties from the plugin configuration
     * 
     * @param properties
     */
    void setProperties(Properties properties);
    
    /**
     * This method is called after all the setXXX methods are called, but before any
     * other method is called.  This allows the plugin to determine whether
     * it can run or not.  For example, if the plugin requires certain properties
     * to be set, and the properties are not set, then the plugin is invalid
     * and will not run.
     * 
     * @param warnings add strings to this list to specify warnings.  For example,
     *   if the plugin is invalid, you should specify why.
     * @return true if the plugin is valid.  Invalid plugins will not be
     *   called
     */
    boolean validate(List<String> warnings);
    
    List<GeneratedJavaFile> generateAdditionalJavaFiles();
    List<GeneratedXmlFile> generateAdditionalXmlFiles();

    /**
     * This method can be used by plugins to generate additional Java classes.
     * This method is called after the classes from the normal
     * JavaModelGenerator are called.
     * <p/>
     * This method is called in all cases.
     * 
     * @param introspectedTable
     * @return a List of GeneratedJavaFiles - ibator will persist these
     *    files with the other files from this run of ibator.
     */
    List<GeneratedJavaFile> generateAdditionalModelClasses(IntrospectedTable introspectedTable);

    /**
     * This method is called after the primary key class is generated by
     * the ibator supplied JavaModelGenerator.  This method will only be
     * called if the table rules generate a primary key class.
     * <p/>
     * This method is only guaranteed to be called by the ibator
     * supplied Java model generators.  Other user supplied generators
     * may, or may not, call this method.
     * 
     * @param topLevelClass the generated primary key class
     * @param introspectedTable ibator's introspected table structure
     */
    void modelPrimaryKeyClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable);

    void modelBaseRecordClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    
    void modelRecordWithBLOBsClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    
    void modelExampleClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    
    // methods related to generated XML elements
    List<GeneratedXmlFile> generateAdditionalXmlFiles(IntrospectedTable introspectedTable);
    
    // the following methods are only guaranteed to be called with the built in 
    // ibator SqlMap generators.
    void sqlMapGenerated(GeneratedXmlFile sqlMap, IntrospectedTable introspectedTable);
    void sqlMapBaseResultMapGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapCountByExampleElementGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapDeleteByExampleElementGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapDeleteByPrimaryKeyElementGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapExampleWhereClauseGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapInsertElementGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapResultMapWithBLOBsGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapSelectByPrimaryKeyElementGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapSelectByExampleElementGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapSelectByExampleWithBLOBsElementGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapUpdateByExampleSelectiveElementGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapUpdateByExampleWithBLOBsElementGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapUpdateByExampleWithoutBLOBsElementGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapUpdateByPrimaryKeySelectiveElementGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapUpdateByPrimaryKeyWithBLOBsElementGenerated(XmlElement element, IntrospectedTable introspectedTable);
    void sqlMapUpdateByPrimaryKeyWithoutBLOBsElementGenerated(XmlElement element, IntrospectedTable introspectedTable);

    // methods related to generated DAO classes
    List<GeneratedJavaFile> generateAdditionalDAOClasses(IntrospectedTable introspectedTable);

    // the following methods are only guaranteed to be called with the built in 
    // ibator DAO generators.
    void daoInterfaceGenerated(Interface interfaze, IntrospectedTable introspectedTable);
    void daoImplementationGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoCountByExampleMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoCountByExampleMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable);
    void daoDeleteByExampleMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable);
    void daoDeleteByExampleMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoDeleteByPrimaryKeyMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable);
    void daoDeleteByPrimaryKeyMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoInsertMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoInsertMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable);
    void daoSelectByExampleWithBLOBsMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoSelectByExampleWithBLOBsMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable);
    void daoSelectByExampleWithoutBLOBsMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoSelectByExampleWithoutBLOBsMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable);
    void daoSelectByPrimaryKeyMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoSelectByPrimaryKeyMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable);
    void daoUpdateByExampleSelectiveMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoUpdateByExampleSelectiveMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable);
    void daoUpdateByExampleWithBLOBsMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoUpdateByExampleWithBLOBsMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable);
    void daoUpdateByExampleWithoutBLOBsMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoUpdateByExampleWithoutBLOBsMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable);
    void daoUpdateByPrimaryKeySelectiveMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoUpdateByPrimaryKeySelectiveMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable);
    void daoUpdateByPrimaryKeyWithBLOBsMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoUpdateByPrimaryKeyWithBLOBsMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable);
    void daoUpdateByPrimaryKeyWithoutBLOBsMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedTable introspectedTable);
    void daoUpdateByPrimaryKeyWithoutBLOBsMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable);
}

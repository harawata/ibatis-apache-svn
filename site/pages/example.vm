<html>
<head>    
    <title>iBATIS Quick Example</title>
</head>

<body>

<h3>What does a Mapped Statement Look like?</h3>

<textarea rows="20" cols="120">
&lt;!-- The following is an example of a simple SQL Map.  This query uses
a feature of the SQL Map framework that allows columns aliases to be 
automatically mapped to JavaBeans properties.  Imagine that the Address 
class has the properties: id (int), description (String), street (String), 
city (String), province (String), and postalCode (String).  By using column 
aliases in the SQL statement (a standard SQL feature) and naming the 
class in the result-class attribute, the values in the columns will be 
automatically mapped to the JavaBean!  This is <u>just one way</u> to get an 
Object (JavaBean) from an SQL query using the SQL Map framework. --&gt;

&lt;select id=&quot;getAddress&quot; parameterClass=&quot;int&quot; 
                        resultClass=&quot;examples.domain.Address&quot;&gt;
              select ADR_ID           as id,
                ADR_DESCRIPTION  as description,
                ADR_STREET       as street,
                ADR_CITY         as city,
                ADR_PROVINCE     as province,
                ADR_POSTAL_CODE  as postalCode
              from ADDRESS
              where ADR_ID = #value#

&lt;/select&gt;
</textarea>

<h3>How would I execute it from Java?</h3>          

<pre>
/* The following simple line of code would execute the above mapped 
 * statement using the integer 5 as the key to be passed to the #value# 
 * parameter in the above statement.
 */

Integer pk = new Integer(5);
Address address = (Address)sqlMap.queryForObject(&quot;getAddress&quot;, pk);</pre>

      <pre>&lt;!-- SQL Maps are not just used for queries, here's
  how a new Address could be inserted --&gt;

&lt;insert id=&quot;insertAddress&quot; parameterClass=&quot;examples.domain.Address&quot;&gt;
      insert into ADDRESS (
        ADR_ID,           
        ADR_DESCRIPTION,  
        ADR_STREET,      
        ADR_CITY,         
        ADR_PROVINCE,     
        ADR_POSTAL_CODE)
      values (
        #id#, 
        #description#,
        #street#,  
        #city#,  
        #province#,  
        #postalCode#)
&lt;/insert&gt;

// Executing this insert is just as easy as a query.
// The executeUpdate() method is used for inserts, updates and deletes.

Address address = new Address();
address.setId(15);
address.setDescription(&quot;Bob's Comic Book Store&quot;);
address.setStreet (&quot;16 Somestreet&quot;);
...<b>
sqlMap.insert (&quot;insertAddress&quot;, address);</b>

&lt;!-- Here's an example that returns more than one result --&gt;

 &lt;select id="getProductByCategory" parameterClass=&quot;int&quot; 
                                   resultClass="examples.domain.Product"&gt;      
  select
    PRD_ID           as id,        
    PRD_CATEGORY     as category,
    PRD_DESCRIPTION  as description,
    PRD_RETAIL       as retail,        
    PRD_QUANTITY     as quantity      
  from PRODUCT      
  where PRD_CATEGORY = #value#

&lt;/select&gt;

// Executing the above statement for a list of products 
// in the "dog" category is as simple as this:

String category = "dog";
List productList = <b>sqlMap.queryForList("getProductByCategory", category);</b>

// Too many results?  How about a fully navigatable, 
// lazy-loaded, paginated list of products that's 
// JavaBeans compliant and easily usable from within 
// a JSP page? Is 10 per page okay?

PaginatedList productList = <b>sqlMap.queryForList("getProductByCategory", 
                                                 category, 
                                                 10);</b>

productList.nextPage();
productList.previousPage();
productList.isNextPageAvailable();
// etc.

// Need a Map of just the Product IDs and Descriptions from 
// the same query?

Map descriptionMap = <b>sqlMap.queryForMap ("getProductByCategory", 
                                          category, 
                                          "id", 
                                          "description");</b>

&lt;!-- Complex proprietary SQL from a legacy system?  
For example, maybe you need to flatten out a 
complex parent/child tree using Oracle? --&gt;

&lt;select id="getEmployeesByManagerRecursively" parameterClass=&quot;int&quot;
                                              resultClass="examples.domain.Employee"&gt;      
    SELECT 
        emp_id           as id,
        emp_number       as employeeNumber,
        emp_first_name   as firstName,
        emp_last_name    as lastName,
        emp_dept_code    as departmentCode          
    FROM employee
    <b>START WITH emp_id = #value#
    CONNECT BY PRIOR emp_manager_id = emp_id;</b>
&lt;/select&gt;

Integer managerId = new Integer(15);
List employeeList = <b>sqlMap.queryForList("getEmployeesByManagerRecursively", 
                                         managerId);</b>
</pre>

<h3>Want to see more?</h3>
<p>Check out <a href="petstore.html">JPetStore 4</a>, it uses many of the latest features and is a great example 
of a complete application.</p>
<p>And there is also a comprehensive <a href="download.html">Developer Guide</a> for complete documentation.</p>


</body>

</html>